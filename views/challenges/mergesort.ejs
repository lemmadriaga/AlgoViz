<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Merge Sort Challenge</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              primary: {
                50: "#eff6ff",
                100: "#dbeafe",
                200: "#bfdbfe",
                300: "#93c5fd",
                400: "#60a5fa",
                500: "#3b82f6",
                600: "#2563eb",
                700: "#1d4ed8",
                800: "#1e40af",
                900: "#1e3a8a",
                950: "#172554",
              },
            },
          },
        },
      };
    </script>
    <style>
        body {
        font-family: 'Inter', sans-serif;
      }
      #editor {
        background-color: #2d2d2d; /* Dark background */
        color: #f8f8f2; /* Light font color */
        font-family: monospace; /* Use monospace font */
        border-radius: 8px; /* Rounded corners */
        padding: 10px; /* Padding for better spacing */
        height: 400px; /* Set fixed height */
        overflow-y: auto; /* Scrollable if content overflows */
      }

      .header-container {
        background-color: #e10008;
        color: white;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: -15px;
        margin-top: 10px;
      }

      header h1 {
        width: 17cm;
      }

      .container {
        background-color: #fff;
        border-radius: 8px;
        padding: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      .button-container {
        display: flex;
        justify-content: center;
        gap: 20px;
      }

      .custom-button {
        background-color:#e10008;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .custom-button:hover {
        background-color: #800000;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }

      .green-button {
        background-color:#06D001;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .green-button:hover {
        background-color: #059212;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }

      .blue-button {
        background-color:#006BFF;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .blue-button:hover {
        background-color: #133E87;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }
    </style>
  </head>
  <body
    class="bg-gray-100 flex flex-col items-center justify-center min-h-screen p-6"
  >
    <header class="header-container text-center">
      <h1 class="text-2xl font-bold">Merge Sort Challenge</h1>
    </header>

    <main class="mt-8 w-full max-w-2xl">
      <div id="challengeIntro" class="container text-center">
        <p class="text-lg">
          Understand how Merge Sort works by completing the split and merge
          steps interactively!
        </p>
        <div class="button-container mt-4">
          <button
            id="startButton"
            class="green-button text-white font-bold px-6 py-2 rounded shadow"
          >
            Start
          </button>
          <a
            href="/dashboard"
            class="custom-button text-white font-bold px-6 py-2 rounded shadow"
          >
            Cancel
          </a>
        </div>
      </div>

      <div id="challengeSection" class="hidden">
        <div class="text-center mb-6">
          <p class="text-2xl font-bold text-red-600">
            Time Remaining: <span id="timer">15:00</span>
          </p>
        </div>
        <div class="container mx-auto px-4 py-8 flex flex-col space-y-6">
          <!-- Visualization Section -->
          <div class="bg-white p-6 rounded-lg shadow-md">
            <h2 class="text-xl font-semibold mb-4 text-primary-700">
              Visualization
            </h2>
            <div class="space-y-4">
              <div>
                <h3 class="font-medium text-gray-700 mb-2">Split Step</h3>
                <div
                  id="split-step"
                  class="flex flex-wrap justify-center gap-2"
                ></div>
              </div>
              <div>
                <h3 class="font-medium text-gray-700 mb-2">Merge Step</h3>
                <div
                  id="merge-step"
                  class="flex flex-wrap justify-center gap-2"
                ></div>
              </div>
            </div>
          </div>

          <!-- Code Editor Section -->
          <div class="w-full bg-white shadow-md p-6 rounded-lg">
            <h2 class="text-xl font-bold mb-4">Fix the Merge Sort Code</h2>
            <p class="text-gray-600 mb-2">
              Complete the `mergeSort` function to sort the array correctly.
            </p>
            <div
              id="editor"
              class="border rounded bg-gray-50 min-h-[400px] font-mono"
            ></div>
            <div
              id="code-feedback"
              class="hidden p-4 mt-4 rounded text-center"
            ></div>
            <!-- Centered Buttons -->
            <div class="flex justify-center gap-4 mt-4">
              <button
                onclick="runCode()"
                class="green-button text-white font-bold py-2 px-4 rounded"
              >
                Run Code
              </button>
              <button
                onclick="submitCode()"
                class="blue-button text-white font-bold py-2 px-4 rounded"
              >
                Submit Code
              </button>
            </div>
          </div>
        </div>
      </div>
    </main>

    <script>
      window.onload = function () {
        const startButton = document.getElementById("startButton");

        if (startButton) {
          startButton.addEventListener("click", () => {
            document.getElementById("challengeIntro").classList.add("hidden");
            document
              .getElementById("challengeSection")
              .classList.remove("hidden");
          });
        } else {
          console.error("Start button not found.");
        }
      };

      let timer = 900;
      const timerElement = document.getElementById("timer");

      function formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${minutes}:${secs.toString().padStart(2, "0")}`;
      }

      const timerInterval = setInterval(() => {
        if (timer > 0) {
          timer--;
          timerElement.textContent = formatTime(timer);
        } else {
          clearInterval(timerInterval);
          alert("Time's up!");
        }
      }, 1000);

      const editor = ace.edit("editor");
      editor.setTheme("ace/theme/monokai");
      editor.session.setMode("ace/mode/javascript");

      editor.setValue(`function mergeSort(arr) {
  if (arr.length <= 1) return arr;

  // Split the array into left and right halves
  const mid = Math.floor(arr.length / 2);
  const left = arr.slice(0, mid);
  const right = arr.slice(mid);

  // TODO: Recursively sort the left and right halves
  // Uncomment and complete the following line:
  // return merge(_____, _____);
}

function merge(left, right) {
  let result = [];
  let i = 0, j = 0;

  // TODO: Implement merging logic
  // Hint: Compare elements from left and right arrays and build the result array

  // Uncomment and complete the following while loop:
  // while (_____ < _____ && _____ < _____) {
  //   if (_____) {
  //     result.push(_____); // Add the smaller element to the result
  //   } else {
  //     result.push(_____); // Add the smaller element to the result
  //   }
  // }

  // Add any remaining elements
  // Uncomment and complete the following:
  // return result.concat(_____).concat(_____);
}

// Test the function
const testArray = [38, 27, 43, 3, 9, 82, 10];
// Uncomment the following line to test
// console.log(mergeSort(testArray));
`);

      const splitStep = document.getElementById("split-step");
      const mergeStep = document.getElementById("merge-step");
      const testArray = [38, 27, 43, 3, 9, 82, 10];

      function visualizeSplit(array) {
        splitStep.innerHTML = "";
        array.forEach((item) => {
          const div = document.createElement("div");
          div.textContent = item;
          div.className = "px-3 py-2 bg-gray-200 rounded";
          splitStep.appendChild(div);
        });
      }

      function visualizeMerge(array) {
        mergeStep.innerHTML = "";
        array.forEach((item) => {
          const div = document.createElement("div");
          div.textContent = item;
          div.className = "px-3 py-2 bg-green-200 rounded";
          mergeStep.appendChild(div);
        });
      }

      visualizeSplit(testArray);

      function runCode() {
        const userCode = editor.getValue();

        try {
          const userFunction = new Function(`${userCode}; return mergeSort;`);
          const result = userFunction()(testArray.slice());
          visualizeMerge(result);
          showFeedback("Code ran successfully!", "success");
        } catch (error) {
          showFeedback("Error in your code: " + error.message, "error");
        }
      }

      async function submitCode() {
        const userCode = editor.getValue();

        try {
          const response = await axios.post("/challenges/mergesort/submit", {
            userCode,
          });

          if (response.data.success) {
            showFeedback(response.data.message, "success");

            setTimeout(() => {
              window.location.href = "/dashboard";
            }, 2000);
          } else {
            showFeedback(response.data.message, "error");
          }
        } catch (error) {
          showFeedback(
            "Error submitting code: " +
              (error.response?.data?.message || error.message),
            "error"
          );
        }
      }

      function showFeedback(message, type) {
        const feedback = document.getElementById("code-feedback");
        feedback.textContent = message;
        feedback.classList.remove(
          "hidden",
          "bg-green-100",
          "text-green-800",
          "bg-red-100",
          "text-red-800"
        );
        feedback.classList.add(
          type === "success" ? "bg-green-100" : "bg-red-100"
        );
        feedback.classList.add(
          type === "success" ? "text-green-800" : "text-red-800"
        );
      }

      document.getElementById("startButton").addEventListener("click", () => {
        document.getElementById("challengeIntro").classList.add("hidden");
        document.getElementById("challengeSection").classList.remove("hidden");
      });
    </script>
  </body>
</html>
