<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Merge Sort Challenge</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              primary: {
                50: "#eff6ff",
                100: "#dbeafe",
                200: "#bfdbfe",
                300: "#93c5fd",
                400: "#60a5fa",
                500: "#3b82f6",
                600: "#2563eb",
                700: "#1d4ed8",
                800: "#1e40af",
                900: "#1e3a8a",
                950: "#172554",
              },
            },
          },
        },
      };
    </script>
  </head>
  <body class="bg-gray-100 font-sans">
    <div class="container mx-auto p-4 space-y-6">
      <h1 class="text-3xl font-bold text-primary-600">Merge Sort Challenge</h1>
      <p class="text-lg text-gray-700">
        Understand how Merge Sort works by completing the split and merge steps
        interactively!
      </p>

      <!-- Timer -->
      <div class="text-right text-lg font-bold">
        Time Remaining: <span id="timer" class="text-red-500">15:00</span>
      </div>

      <div class="grid md:grid-cols-2 gap-6">
        <!-- Visualization Section -->
        <div class="bg-white p-6 rounded-lg shadow-md">
          <h2 class="text-xl font-semibold mb-4 text-primary-700">
            Visualization
          </h2>
          <div class="space-y-4">
            <div>
              <h3 class="font-medium text-gray-700 mb-2">Split Step</h3>
              <div
                id="split-step"
                class="flex flex-wrap justify-center gap-2"
              ></div>
            </div>
            <div>
              <h3 class="font-medium text-gray-700 mb-2">Merge Step</h3>
              <div
                id="merge-step"
                class="flex flex-wrap justify-center gap-2"
              ></div>
            </div>
          </div>
        </div>

        <!-- Code Editor Section -->
        <div class="bg-white p-6 rounded-lg shadow-md">
          <h2 class="text-xl font-semibold mb-4 text-primary-700">
            Fix the Merge Sort Code
          </h2>
          <p class="text-gray-600 mb-2">
            Complete the `mergeSort` function to sort the array correctly.
          </p>
          <div id="editor" class="h-80 border rounded-lg"></div>
          <div class="mt-4 space-x-2">
            <button
              onclick="runCode()"
              class="bg-primary-500 hover:bg-primary-600 text-white font-bold px-4 py-2 rounded shadow transition duration-200"
            >
              Run Code
            </button>
            <button
              onclick="submitCode()"
              class="bg-green-500 hover:bg-green-600 text-white font-bold px-4 py-2 rounded shadow transition duration-200"
            >
              Submit Code
            </button>
          </div>
          <p id="code-feedback" class="hidden mt-2 p-2 rounded"></p>
        </div>
      </div>
    </div>

    <script>
      let timer = 900;
      const timerElement = document.getElementById("timer");

      function formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${minutes}:${secs.toString().padStart(2, "0")}`;
      }

      const timerInterval = setInterval(() => {
        if (timer > 0) {
          timer--;
          timerElement.textContent = formatTime(timer);
        } else {
          clearInterval(timerInterval);
          alert("Time's up!");
        }
      }, 1000);

      const editor = ace.edit("editor");
      editor.setTheme("ace/theme/monokai");
      editor.session.setMode("ace/mode/javascript");

      editor.setValue(`function mergeSort(arr) {
  if (arr.length <= 1) return arr;

  const mid = Math.floor(arr.length / 2);
  const left = arr.slice(0, mid);
  const right = arr.slice(mid);

  return merge(
    mergeSort(left),
    mergeSort(right)
  );
}

function merge(left, right) {
  let result = [];
  let i = 0, j = 0;

  while (i < left.length && j < right.length) {
    if (left[i] < right[j]) {
      result.push(left[i++]);
    } else {
      result.push(right[j++]);
    }
  }

  return result.concat(left.slice(i)).concat(right.slice(j));
}

// Test the function
const testArray = [38, 27, 43, 3, 9, 82, 10];
console.log(mergeSort(testArray));`);

      const splitStep = document.getElementById("split-step");
      const mergeStep = document.getElementById("merge-step");
      const testArray = [38, 27, 43, 3, 9, 82, 10];

      function visualizeSplit(array) {
        splitStep.innerHTML = "";
        array.forEach((item) => {
          const div = document.createElement("div");
          div.textContent = item;
          div.className = "px-3 py-2 bg-gray-200 rounded";
          splitStep.appendChild(div);
        });
      }

      function visualizeMerge(array) {
        mergeStep.innerHTML = "";
        array.forEach((item) => {
          const div = document.createElement("div");
          div.textContent = item;
          div.className = "px-3 py-2 bg-green-200 rounded";
          mergeStep.appendChild(div);
        });
      }

      visualizeSplit(testArray);

      function runCode() {
        const userCode = editor.getValue();

        try {
          const userFunction = new Function(`${userCode}; return mergeSort;`);
          const result = userFunction()(testArray.slice());
          visualizeMerge(result);
          showFeedback("Code ran successfully!", "success");
        } catch (error) {
          showFeedback("Error in your code: " + error.message, "error");
        }
      }

      async function submitCode() {
        const userCode = editor.getValue();

        try {
          const response = await axios.post("/challenges/mergesort/submit", {
            userCode,
          });

          if (response.data.success) {
            showFeedback(response.data.message, "success");
          } else {
            showFeedback(response.data.message, "error");
          }
        } catch (error) {
          showFeedback(
            "Error submitting code: " +
              (error.response?.data?.message || error.message),
            "error"
          );
        }
      }

      function showFeedback(message, type) {
        const feedback = document.getElementById("code-feedback");
        feedback.textContent = message;
        feedback.classList.remove(
          "hidden",
          "bg-green-100",
          "text-green-800",
          "bg-red-100",
          "text-red-800"
        );
        feedback.classList.add(
          type === "success" ? "bg-green-100" : "bg-red-100"
        );
        feedback.classList.add(
          type === "success" ? "text-green-800" : "text-red-800"
        );

        setTimeout(() => {
          feedback.classList.add("hidden");
        }, 5000);
      }
    </script>
  </body>
</html>
