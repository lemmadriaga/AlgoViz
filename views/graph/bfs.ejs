<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BFS Visualization</title>
    <script src="https://cdn.jsdelivr.net/npm/d3@7.8.2/dist/d3.min.js"></script>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />

    <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css"
    rel="stylesheet"
/>
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css"
   rel="stylesheet"
/>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>


    <style>
       .graphContainer {
        background-color: #f3f4f6;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 660px;
        height: 360px;
        overflow: hidden;
      }

      .description-container {
        background-color: #ffffff; 
        color: #333333; 
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin-left: 305px;
        margin-right: 305px;
        margin-top: 5px;
      }

      .custom-button {
        background-color: #1E201E;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .custom-button:hover {
        background-color: #697565;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }
    </style>
  </head>

  <body class="bg-gray-100 p-4">
    <a href="javascript:history.back()" class="custom-button inline-block">Back</a>

    <div class="text-center mb-2">
      <h1 class="text-3xl font-bold text-[#1E201E]">
        Breadth-First Search Visualization
      </h1>
      </div>

      <p class="text-center text-gray-700 mb-2 mr-20 ml-20">
        Enter the number of nodes and edges below. Define edges as <strong>"source-target"</strong> (e.g., 0-1, 1-2). <br>Click "Start BFS" after generating the graph to begin traversal from Node 0.
      </p>

      <div class="flex justify-center space-x-8 mb-2">
      <div class="graphContainer flex justify-center items-center relative">
        <svg id="graph" class="w-full h-full flex items-end justify-center"></svg>
      </div>
      </div>

      <form id="graphForm" class="p-4 mt-2">
        <div class="flex justify-center items-center gap-2">
            <input
              type="number"
              id="nodes"
              placeholder="Number of Nodes"
              name="nodes"
              min="2"
              max="20"
              required
              class="border border-gray-300 p-2 rounded w-40"
            />

            <input
            type="text"
            id="edges"
            placeholder="Edges (e.g., 0-1,1-2)"
            name="edges"
            required
            placeholder="Enter edges separated by commas"
            class="border border-gray-300 p-2 rounded w-45"
          />

          <button
          type="submit"
          class="custom-button text-white px-4 py-2 rounded-md"
        >
          Generate Graph
        </button>
        <button
        id="startBfs"
        class="custom-button text-white px-4 py-2 rounded-md"
        disabled
      >
        Start BFS
      </button>
          </div>
      </form>

      <div class="description-container">
        <div class="flex justify-center items-center space-x-4 ">
          <button onclick="toggleContainer('About')" class="custom-button">About</button>
          <button onclick="toggleContainer('Work')" class="custom-button">How does it work</button>
          <button onclick="toggleContainer('Learn')" class="custom-button">Learn More</button>
        </div>

        <div id="About" class="hidden">
          <p>
              <b>Breadth First Search (BFS)</b> is a fundamental graph traversal algorithm. It begins with a node, 
              then first traverses all its adjacent nodes. Once all adjacent nodes are visited, their adjacent nodes 
              are traversed. This is different from Depth First Search (DFS) as BFS visits the closest vertices first. 
              BFS mainly traverses vertices level by level.
          </p>
          <ul class="list-disc ml-6 mt-4 text-gray-700">
              <li>
                  BFS is commonly used as a foundation for popular graph algorithms like:
                  <ul class="list-disc ml-6">
                      <li><b>Dijkstra’s shortest path</b></li>
                      <li><b>Kahn’s Algorithm</b> for topological sorting</li>
                      <li><b>Prim’s Algorithm</b> for minimum spanning trees</li>
                  </ul>
              </li>
              <li>
                  <b>Applications of BFS:</b>
                  <ul class="list-disc ml-6">
                      <li>Detecting cycles in directed and undirected graphs.</li>
                      <li>Finding the shortest path in an unweighted graph.</li>
                      <li>Solving connectivity problems and maze-like puzzles.</li>
                  </ul>
              </li>
              <li>
                  <b>Algorithm Overview:</b>
                  <ul class="list-disc ml-6">
                      <li>Initialize a queue and enqueue the starting node.</li>
                      <li>Mark the starting node as visited.</li>
                      <li>While the queue is not empty:
                          <ul class="list-disc ml-6">
                              <li>Dequeue a node from the front of the queue.</li>
                              <li>Visit all its adjacent, unvisited nodes.</li>
                              <li>Mark those nodes as visited and enqueue them.</li>
                          </ul>
                      </li>
                  </ul>
              </li>
              <li>
                  <b>Time Complexity:</b>
                  <ul class="list-disc ml-6">
                      <li>O(V + E) – where V is the number of vertices and E is the number of edges.</li>
                  </ul>
              </li>
              <li>
                  <b>Space Complexity:</b>
                  <ul class="list-disc ml-6">
                      <li>O(V) – due to the visited list and queue.</li>
                  </ul>
              </li>
              <li>
                  <b>Advantages:</b>
                  <ul class="list-disc ml-6">
                      <li>Finds shortest paths in unweighted graphs.</li>
                      <li>Efficient for graphs with a small depth relative to the number of vertices.</li>
                  </ul>
              </li>
              <li>
                  <b>Disadvantages:</b>
                  <ul class="list-disc ml-6">
                      <li>Requires additional memory for a queue and visited list.</li>
                      <li>Can be inefficient for very large graphs with high branching factors.</li>
                  </ul>
              </li>
          </ul>
      </div>
      
      
        <div id="Work" class="hidden">
          <h2 class="text-lg font-bold">JavaScript Breadth-First Search</h2>
          <pre class="line-numbers"><code class="language-javascript">
            // BFS from given source s
            function bfs(adj, s) {
                const visited = Array(V).fill(false); 
                const queue = []; 
            
                // Mark the source node as visited 
                // and enqueue it
                visited[s] = true;
                queue.push(s);
            
                // Iterate over the queue
                while (queue.length) {
                
                    // Dequeue a vertex from queue and print it
                    const curr = queue.shift();
                    process.stdout.write(curr + " ");
            
                    // Get all adjacent vertices of the dequeued 
                    // vertex. If an adjacent has not been visited, 
                    // mark it visited and enqueue it
                    for (const x of adj[curr]) {
                        if (!visited[x]) {
                            visited[x] = true;
                            queue.push(x);
                        }
                    }
                }
            }
            
            // Function to add an edge to the graph
            function addEdge(u, v) {
                adj[u].push(v);
                adj[v].push(u);
            }
            
            // Example usage
            const V = 5;
            const adj = Array.from({ length: V }, () => []);
            addEdge(0, 1);
            addEdge(0, 2);
            addEdge(1, 3);
            addEdge(1, 4);
            addEdge(2, 4);
            
            console.log("BFS starting from 0:");
            bfs(adj, 0);
            
          
            
          </code></pre>
          <h2 class="text-lg font-bold">Python Breadth-First Search</h2>
          <pre class="line-numbers"><code class="language-python">
            from collections import deque

            # BFS from given source s
            def bfs(adj, s):
              
                # Create a queue for BFS
                q = deque()
                
                # Initially mark all the vertices as not visited
                # When we push a vertex into the q, we mark it as 
                # visited
                visited = [False] * len(adj);
            
                # Mark the source node as visited and enqueue it
                visited[s] = True
                q.append(s)
            
                # Iterate over the queue
                while q:
                  
                    # Dequeue a vertex from queue and print it
                    curr = q.popleft()
                    print(curr, end=" ")
            
                    # Get all adjacent vertices of the dequeued 
                    # vertex. If an adjacent has not been visited, 
                    # mark it visited and enqueue it
                    for x in adj[curr]:
                        if not visited[x]:
                            visited[x] = True
                            q.append(x)
            
            # Function to add an edge to the graph
            def add_edge(adj, u, v):
                adj[u].append(v)
                adj[v].append(u)
            
            # Example usage
            if __name__ == "__main__":
              
                # Number of vertices in the graph
                V = 5
            
                # Adjacency list representation of the graph
                adj = [[] for _ in range(V)]
            
                # Add edges to the graph
                add_edge(adj, 0, 1)
                add_edge(adj, 0, 2)
                add_edge(adj, 1, 3)
                add_edge(adj, 1, 4)
                add_edge(adj, 2, 4)
            
                # Perform BFS traversal starting from vertex 0
                print("BFS starting from 0: ")
                bfs(adj, 0)
          </code></pre>
          <h2 class="text-lg font-bold">Java Breadth-First Search</h2>
          <pre class="line-numbers"><code class="language-java">
  
            import java.util.*;

class GfG {
  
    // BFS from given source s
    static void bfs(List<List<Integer>> adj, int s) {
      
        // Create a queue for BFS
        Queue<Integer> q = new LinkedList<>();
        
        // Initially mark all the vertices as not visited
        // When we push a vertex into the q, we mark it as 
        // visited
        boolean[] visited = new boolean[adj.size()];
        
        // Mark the source node as visited and enqueue it
        visited[s] = true;
        q.add(s);
        
        // Iterate over the queue
        while (!q.isEmpty()) {
          
            // Dequeue a vertex and print it
            int curr = q.poll();
            System.out.print(curr + " ");
            
            // Get all adjacent vertices of the dequeued vertex
            // If an adjacent has not been visited, mark it 
            // visited and enqueue it
            for (int x : adj.get(curr)) {
                if (!visited[x]) {
                    visited[x] = true;
                    q.add(x);
                }
            }
        }
    }

    // Function to add an edge to the graph
    static void addEdge(List<List<Integer>> adj, int u, int v) {
        adj.get(u).add(v);
        adj.get(v).add(u); // Undirected graph
    }

    public static void main(String[] args) {
      
        // Number of vertices in the graph
        int V = 5;
        
        // Adjacency list representation of the graph
        List<List<Integer>> adj = new ArrayList<>(V);
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        
        // Add edges to the graph
        addEdge(adj, 0, 1);
        addEdge(adj, 0, 2);
        addEdge(adj, 1, 3);
        addEdge(adj, 1, 4);
        addEdge(adj, 2, 4);
        
        // Perform BFS traversal starting from vertex 0
        System.out.println("BFS starting from 0:");
        bfs(adj, 0);
    }
}
       
          </code></pre>
        </div>

        <div id="Learn" class="hidden">
          <h2 class="text-lg font-bold text-center">Learn More About Breadth-First Search</h2>
          <div class="flex justify-center items-center">
            <iframe 
            width="560" 
            height="315" 
            src="https://www.youtube.com/embed/HZ5YTanv5QE?si=-AMQ7X0WvwBwBzr3" 
            title="YouTube video player" 
            frameborder="0" 
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
            referrerpolicy="strict-origin-when-cross-origin" 
            allowfullscreen>
        </iframe>     
          </div>
        </div>

    
  
    <script>

function toggleContainer(containerId) {
        const containers = ['About', 'Work', 'Learn'];
        containers.forEach((id) => {
          const container = document.getElementById(id);
          if (id === containerId) {
            container.classList.toggle('hidden');
          } else {
            container.classList.add('hidden');
          }
        });
      }
      let nodes = [];
      let edges = [];
      let graph = {};
      let svg;

      document
        .getElementById("graphForm")
        .addEventListener("submit", function (e) {
          e.preventDefault();

          const nodesCount = parseInt(document.getElementById("nodes").value);
          const edgesInput = document.getElementById("edges").value.trim();
          edges = edgesInput.split(",").map((edge) => {
            const [source, target] = edge.split("-");
            return { source: +source, target: +target };
          });

          nodes = Array.from({ length: nodesCount }, (_, i) => ({ id: i }));

          graph = {};
          for (const edge of edges) {
            if (!graph[edge.source]) graph[edge.source] = [];
            if (!graph[edge.target]) graph[edge.target] = [];
            graph[edge.source].push(edge.target);
            graph[edge.target].push(edge.source);
          }

          renderGraph();

          document.getElementById("startBfs").disabled = false;
        });

      document
        .getElementById("startBfs")
        .addEventListener("click", function () {
          bfsTraversal(0);
        });

      function renderGraph() {
        svg = d3.select("#graph");
        svg.selectAll("*").remove();

        const width = svg.node().clientWidth;
        const height = svg.node().clientHeight;

        const simulation = d3
          .forceSimulation(nodes)
          .force(
            "link",
            d3
              .forceLink(edges)
              .id((d) => d.id)
              .distance(100)
          )
          .force("charge", d3.forceManyBody().strength(-200))
          .force("center", d3.forceCenter(width / 2, height / 2));

        const link = svg
          .append("g")
          .selectAll("line")
          .data(edges)
          .enter()
          .append("line")
          .attr("stroke", "#999")
          .attr("stroke-width", 2);

        const node = svg
          .append("g")
          .selectAll("circle")
          .data(nodes)
          .enter()
          .append("circle")
          .attr("r", 15)
          .attr("fill", "#69b3a2")
          .call(
            d3
              .drag()
              .on("start", dragStarted)
              .on("drag", dragged)
              .on("end", dragEnded)
          );

        const label = svg
          .append("g")
          .selectAll("text")
          .data(nodes)
          .enter()
          .append("text")
          .text((d) => d.id)
          .attr("font-size", 12)
          .attr("text-anchor", "middle")
          .attr("dy", 4);

        simulation.on("tick", () => {
          link
            .attr("x1", (d) => d.source.x)
            .attr("y1", (d) => d.source.y)
            .attr("x2", (d) => d.target.x)
            .attr("y2", (d) => d.target.y);

          node.attr("cx", (d) => d.x).attr("cy", (d) => d.y);

          label.attr("x", (d) => d.x).attr("y", (d) => d.y);
        });
      }

      function bfsTraversal(start) {
        const visited = new Set();
        const queue = [start];
        const animationDelay = 500;

        let index = 0;

        function visitNode() {
          if (queue.length === 0) return;

          const current = queue.shift();
          if (!visited.has(current)) {
            visited.add(current);

            svg
              .selectAll("circle")
              .filter((d) => d.id === current)
              .transition()
              .duration(animationDelay)
              .attr("fill", "#ff5722");

            for (const neighbor of graph[current] || []) {
              if (!visited.has(neighbor)) {
                queue.push(neighbor);
              }
            }

            index++;
            setTimeout(visitNode, animationDelay);
          }
        }

        visitNode();
      }

      function dragStarted(event, d) {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
      }

      function dragged(event, d) {
        d.fx = event.x;
        d.fy = event.y;
      }

      function dragEnded(event, d) {
        if (!event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
      }
    </script>
  </body>
</html>
