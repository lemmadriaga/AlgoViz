<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Enhanced Bubble Sort Visualization</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />

    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css"
      rel="stylesheet"
/>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css"
      rel="stylesheet"
/>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>



     <style>
      body {
        font-family: 'Inter', sans-serif;
      }
    
      .custom-button {
        background-color: #1E201E;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
    
      .custom-button:hover {
        background-color: #697565;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }
    
      .visualization-container {
        background-color: #f3f4f6;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 400px;
        height: 400px;
        overflow: hidden;
      }
    
      .step-process-container {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 300px;
        height: 400px;
      }
    
      .description-container {
        background-color: #ffffff;
        color: #333333;
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin: 20px 270px;
      }
    
      pre {
        background-color: #f9f9f9;
        color: #333333;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 15px;
        overflow-x: auto;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-size: 0.9rem;
      }
    
      .line-numbers-rows {
        border-right: 1px solid #e1e4e8;
      }
    
      .line-numbers .line-numbers-rows > span:before {
        color: #bbb;
      }
    
      .bar {
        display: inline-block;
        width: 35px;
        margin: 4px;
        background: linear-gradient(to top, #ff8c00, #ffd700);
        color: white;
        text-align: center;
        font-weight: bold;
        border-radius: 5px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
      }
    
      .bar.compare {
        background: linear-gradient(to top, #ffdd44, #ffc107);
      }
    
      .bar.swap {
        background: linear-gradient(to top, #ff6347, #ff4500);
      }
    
      .bar.sorted {
        background: linear-gradient(to top, #32cd32, #228b22);
      }
    
      .slider {
        -webkit-appearance: none;
        width: 100px;
        height: 8px;
        background: #1E201E;
        outline: none;
        opacity: 0.8;
        transition: opacity 0.2s;
        border-radius: 5px;
      }
    
      .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 18px;
        height: 18px;
        background: #697565;
        border-radius: 50%;
        cursor: pointer;
      }
    
      .slider:hover {
        opacity: 1;
      }
    
      @media (max-width: 768px) {
        .visualization-container {
          width: 100%;
          min-height: 400px;
          height: auto;
        }
    
        .step-process-container {
          width: 100%;
          min-height: 400px;
          height: auto;
        }
    
        .description-container {
          margin: 10px;
        }
    
        .description-container .flex {
          flex-direction: column;
          gap: 1rem;
          align-items: center;
        }
    
        .flex {
          flex-direction: column;
          gap: 1rem;
        }
    
        .custom-button {
          width: 100%;
          text-align: center;
        }
    
        input[type="text"],
        .slider {
          width: 100%;
        }
    
        iframe {
          width: 100%;
          height: auto;
        }
    
        pre {
          font-size: 0.8rem;
          padding: 10px;
        }
    
        .bar-container {
          flex-direction: row;
          gap: 4px;
        }
    
        .flex-container {
          flex-direction: column;
        }
    
        .visualization-container,
        .step-process-container {
          margin-bottom: 10px;
        }
    
        .button-group {
          width: 100%;
          flex-direction: row;
        }
    
        .bar {
          flex-direction: row;
          display: flex;
        }
      }
    </style>
    
  </head>
  <body class="bg-gray-100 p-4">
    <a href="javascript:history.back()" class="custom-button inline-block"
      >Back</a
    >

    <div class="text-center mb-2">
      <h1 class="text-3xl font-bold text-[#1E201E]">
        Enhanced Bubble Sort Visualization
      </h1>
    </div>

    <div class="flex flex-col justify-center items-center space-y-4 mb-6">
      <!-- Visualization Container -->
      <div
        class="visualization-container flex justify-center items-center relative"
      >
        <div
          id="visualization"
          class="bar-container w-full h-full flex items-end justify-center"
        ></div>
      </div>
    
      <!-- Step Process Container -->
      <div class="step-process-container overflow-y-auto">
        <h2 class="text-xl font-semibold mb-4 text-[#1E201E] text-center">
          Sorting Steps
        </h2>
        <div id="process" class="text-gray-700 text-sm"></div>
      </div>
    </div>
    

    <div class="flex justify-center items-center gap-4">
      <input
        id="inputField"
        type="text"
        placeholder="Enter numbers, e.g., 5,3,8,1,4"
        class="border border-gray-300 p-2 rounded w-64"
      />

      <div class="flex items-center space-x-4">
        <label for="speedControl" class="text-gray-700 font-semibold"
          >Speed:</label
        >
        <input
          type="range"
          id="speedControl"
          min="100"
          max="2000"
          value="500"
          class="slider"
        />
      </div>

      <div class="button-group flex gap-2">
        <button onclick="startSorting()" class="custom-button">Start</button>
        <button onclick="pauseSorting()" class="custom-button">Pause</button>
        <button onclick="resetSorting()" class="custom-button">Reset</button>
      </div>
    </div>

    <!--<form action="/update-user-progress" method="post" class="flex items-center justify-center mt-10">
      <fieldset class="border border-gray-600 p-4">
        <legend><strong>What is Bubble Sort?</strong></legend>
          <label>A. Bubble Sort is love.</label><br>
          <label>B. Bubble Sort is searching algorithm.</label><br>
          <label>C. Bubble Sort is nice.</label><br>
          <label>D. Bubble Sort is a sorting algorithm.</label><br>
          <input type="text" name="bubbleSort" value="bubbleSort" hidden>
          <input type="text" name="firstQuestion" placeholder="Your answer">
      </fieldset>
      <button type="submit">Submit</button>
    </form>-->

    <div class="description-container">
      <div class="flex justify-center items-center space-x-4">
        <button onclick="toggleContainer('About')" class="custom-button">About</button>
        <button onclick="toggleContainer('Work')" class="custom-button">How does it work</button>
        <button onclick="toggleContainer('Learn')" class="custom-button">Learn More</button>
      </div>

      <!-- Containers now positioned separately -->
      <div id="About" class="hidden">
        <p>
            <b>Bubble Sort</b> is the simplest sorting algorithm that works by repeatedly
            swapping the adjacent elements <b>if they are in the wrong order</b>. This
            algorithm is <b>not suitable for large data sets</b> as its average and
            worst-case time complexity are quite high.
        </p>
        <ul class="list-disc ml-6 mt-4 text-gray-700">
            <li>
                Bubble Sort operates by iterating over the array multiple times, with each 
                iteration referred to as a <b>pass</b>. During each pass, the algorithm 
                compares adjacent elements and swaps them if the current element is 
                larger than the next one.
            </li>
            <li>
                The <b>maximum element</b> is placed in its correct position at the end 
                of the array during the first pass. Similarly, the next largest element 
                is placed in the second-last position in the second pass, and so on, 
                gradually sorting the array.
            </li>
            <li>
                The process repeats until the entire array is sorted, with <b>fewer comparisons</b> 
                required in each subsequent pass as the largest elements are already in place.
            </li>
            <li>
                The algorithm has a <b>best-case time complexity</b> of O(n) when the array is already 
                sorted, as it can detect no swaps are needed. However, its <b>worst-case</b> 
                and <b>average-case time complexities</b> are O(n²), making it inefficient 
                for large data sets.
            </li>
            <li>
                Although Bubble Sort is straightforward and easy to implement, it is 
                primarily used for <b>educational purposes</b> or small data sets due 
                to its inefficiency.
            </li>
            <li>
                To improve performance, an optimization can be added: if no elements 
                are swapped during a pass, the algorithm terminates early as the array 
                is already sorted.
            </li>
            <li>
                Bubble Sort is a <b>stable sorting algorithm</b>, meaning that it preserves 
                the relative order of equal elements.
            </li>
        </ul>
    </div>
    
    

      <div id="Work" class="hidden">
        <h2 class="text-lg font-bold">JavaScript Bubble Sort</h2>
        <pre class="line-numbers"><code class="language-javascript">
          // JavaScript Bubble Sort
          function bubbleSort(arr) {
              let n = arr.length;
              for (let i = 0; i < n - 1; i++) {
                  for (let j = 0; j < n - i - 1; j++) {
                      if (arr[j] > arr[j + 1]) {
                          // Swap
                          [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
                      }
                  }
              }
              return arr;
          }
             
        </code></pre>
        <h2 class="text-lg font-bold">Python Bubble Sort</h2>
        <pre class="line-numbers"><code class="language-python">
          # Python Bubble Sort
          def bubble_sort(arr):
              n = len(arr)
              for i in range(n):
                  for j in range(0, n-i-1):
                      if arr[j] > arr[j+1]:
                          arr[j], arr[j+1] = arr[j+1], arr[j]
              return arr
          
          # Example usage
          numbers = [64, 34, 25, 12, 22, 11, 90]
          print("Unsorted array:", numbers)
          print("Sorted array:", bubble_sort(numbers))
        </code></pre>
        <h2 class="text-lg font-bold">Java Bubble Sort</h2>
        <pre class="line-numbers"><code class="language-java">

          // Java Bubble Sort
          public class BubbleSort {
              public static void bubbleSort(int[] arr) {
                  int n = arr.length;
                  for (int i = 0; i < n - 1; i++) {
                      for (int j = 0; j < n - i - 1; j++) {
                          if (arr[j] > arr[j + 1]) {
                              // Swap
                              int temp = arr[j];
                              arr[j] = arr[j + 1];
                              arr[j + 1] = temp;
                          }
                      }
                  }
              }
          
              public static void main(String[] args) {
                  int[] numbers = {64, 34, 25, 12, 22, 11, 90};
                  System.out.println("Unsorted array: ");
                  for (int num : numbers) {
                      System.out.print(num + " ");
                  }
                  bubbleSort(numbers);
                  System.out.println("\nSorted array: ");
                  for (int num : numbers) {
                      System.out.print(num + " ");
                  }
              }
          }
        </code></pre>
      </div>

      <div id="Learn" class="hidden">
        <h2 class="text-lg font-bold text-center">Learn More About Bubble Sort</h2>
        <div class="flex justify-center items-center">
          <iframe
          width="560"
          height="315"
          src="https://www.youtube.com/embed/xli_FI7CuzA?si=GNEKZu1faP7aSmvH"
          title="YouTube video player"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
          referrerpolicy="strict-origin-when-cross-origin"
          allowfullscreen>
        </iframe>        
      </div>
      
      
    <script>

       function toggleContainer(containerId) {
        const containers = ['About', 'Work', 'Learn'];
        containers.forEach((id) => {
          const container = document.getElementById(id);
          if (id === containerId) {
            container.classList.toggle('hidden');
          } else {
            container.classList.add('hidden');
          }
        });
      }


      let array = [];
      let intervalId;
      let i = 0,
        j = 0;
      let isPaused = false;
      let speed = 500;

      document
      .getElementById("speedControl")
      .addEventListener("input", (event) => {
        speed = 2000 - event.target.value;
        if (intervalId) {
          clearInterval(intervalId);
          intervalId = setInterval(bubbleSortStep, speed);
        }
      });

      function validateInput() {
        const inputField = document.getElementById("inputField");
        const input = inputField.value.trim();

        inputField.setCustomValidity("");

        if (!input) {
          inputField.setCustomValidity("Input should not be empty.");
          return false;
        }

        if (/,,|[^0-9,]/.test(input)) {
          inputField.setCustomValidity("Incorrect format. Use valid numbers separated by single commas.");
          return false;
        }

        const inputArray = input.split(",");
        
        if (inputArray.some((value) => value === "")) {
          inputField.setCustomValidity("Incorrect format. Avoid empty elements or trailing commas.");
          return false;
        }

        if (inputArray.length < 1 || inputArray.length > 10) {
          inputField.setCustomValidity("Only 1-10 numbers are allowed.");
          return false;
        }

        if (inputArray.some((value) => parseInt(value, 10) < 0 || parseInt(value, 10) > 9)) {
          inputField.setCustomValidity("Only numbers between 0-9 are allowed.");
          return false;
        }

        return true;
      }

      function displayArray() {
        const visualization = document.getElementById("visualization");
        visualization.innerHTML = "";

        const maxValue = Math.max(...array);
        const containerHeight = 400;

        array.forEach((value, index) => {
          const bar = document.createElement("div");
          bar.className = "bar";

          const barHeight = ((value / maxValue) * containerHeight) - 50;
          bar.style.height = `${barHeight}px`;
          bar.innerText = value;

          if (index === j) bar.classList.add("compare");
          if (index === j + 1) bar.classList.add("swap");
          if (index >= array.length - i) bar.classList.add("sorted");

          visualization.appendChild(bar);
        });
      }

      function displayProcessStep(message) {
        const processContainer = document.getElementById("process");
        const step = document.createElement("div");
        step.className = "text-sm text-gray-700 mb-2";
        step.innerText = message;
        processContainer.appendChild(step);
        processContainer.scrollTop = processContainer.scrollHeight;
      }

      function startSorting() {
        const inputField = document.getElementById("inputField");

        if (!validateInput()) {
          inputField.reportValidity();
          return;
        }

        const input = inputField.value;
        array = input.split(",").map(Number);
        i = 0;
        j = 0;
        isPaused = false;
        document.getElementById("process").innerHTML = "";
        displayArray();
        displayProcessStep(`Starting array: [${array.join(", ")}]`);
        intervalId = setInterval(bubbleSortStep, speed);
      }

      function bubbleSortStep() {
        if (isPaused) return;

        if (i < array.length) {
          if (j < array.length - i - 1) {
            if (array[j] > array[j + 1]) {
              [array[j], array[j + 1]] = [array[j + 1], array[j]];
              displayArray();
              displayProcessStep(`Switching: ${array[j]} ↔ ${array[j + 1]}`);
            } else {
              displayProcessStep(
                `No switch needed: ${array[j]} and ${array[j + 1]}`
              );
            }
            j++;
          } else {
            j = 0;
            i++;
          }
        } else {
          clearInterval(intervalId);
          displayArray();
          displayProcessStep(`Final sorted array: [${array.join(", ")}]`);
        }
      }

      function pauseSorting() {
        isPaused = !isPaused;
      }

      function resetSorting() {
        clearInterval(intervalId);
        document.getElementById("visualization").innerHTML = "";
        document.getElementById("process").innerHTML = "";
        document.getElementById("inputField").value = "";
        array = [];
        i = 0;
        j = 0;
        isPaused = false;
      }
    </script>
  </body>
</html>