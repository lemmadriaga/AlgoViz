<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Merge Sort & Graph Traversal Visualization | AlgoViz</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />

    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css"
      rel="stylesheet"
/>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css"
      rel="stylesheet"
/>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>

    <style>
         body {
        font-family: 'Inter', sans-serif;
      }
      .custom-button {
        background-color: #1E201E;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .custom-button:hover {
        background-color: #697565;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }

      .visualization-container {
        background-color: #f3f4f6;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 400px;
        height: 400px;
        overflow: hidden;
      }

      .bar {
        display: inline-block;
        width: 30px;
        margin: 4px;
        background: linear-gradient(to top, #ff8c00, #ffd700);
        color: white;
        text-align: center;
        font-weight: bold;
        border-radius: 5px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
      }
      .bar.sorted {
        background: linear-gradient(to top, #32cd32, #228b22);
      }

      .node {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #5800ff;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        position: absolute;
        transition: all 0.3s;
      }
      .node.visited {
        background-color: #ffd700;
      }
      .edge {
        stroke: #5800ff;
        stroke-width: 2;
        transition: all 0.3s;
      }
      .edge.visited {
        stroke: #ffd700;
      }

      .step-process-container {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 300px;
        height: 400px;
      }

      .description-container {
        background-color: #ffffff; 
        color: #333333; 
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin-left: 270px;
        margin-right: 270px;
        margin-top: 20px;
      }

       pre {
        background-color: #f9f9f9; 
        color: #333333; 
        border: 1px solid #ddd; 
        border-radius: 5px;
        padding: 15px;
        overflow-x: auto; 
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-size: 0.9rem; 
      }

       .line-numbers-rows {
         border-right: 1px solid #e1e4e8;
      }

       .line-numbers .line-numbers-rows > span:before {
        color: #bbb; 
      }
      
      .slider {
        -webkit-appearance: none;
        width: 100px;
        height: 8px;
        background: #1E201E;
        outline: none;
        opacity: 0.8;
        transition: opacity 0.2s;
        border-radius: 5px;
      }
      .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 18px; 
        height: 18px; 
        background: #697565; 
        border-radius: 50%; 
        cursor: pointer; 
      }

      .slider:hover {
        opacity: 1;
      }

      /*#graph-visualization {
        position: relative;
        width: 100%;
        height: 300px;
        background-color: #f3f4f6;
        border-radius: 10px;
        margin-top: 1rem;
     }*/
     -->
    </style>
  </head>
  <body class="bg-white p-4">
    <a href="javascript:history.back()" class="custom-button inline-block"
      >Back</a
    >

    <div class="text-center mb-2">
      <h1 class="text-3xl font-bold text-[#1E201E]">
        Enhanced Merge Sort Visualization
      </h1>
    </div>

    <div class="flex justify-center space-x-8 mb-6">
      <div
        class="visualization-container flex justify-center items-center relative"
      >
        <div
          id="visualization"
          class="w-full h-full flex items-end justify-center"
        ></div>
      </div>

      <div class="step-process-container w-1/3 h-96 overflow-y-auto">
        <h2 class="text-xl font-semibold mb-4 text-[#1E201E] text-center">
          Algorithm Steps
        </h2>
        <div id="process" class="text-gray-700 text-sm"></div>
      </div>
    </div>

    <div class="flex justify-center items-center gap-4">
      <input
        id="inputField"
        type="text"
        placeholder="Enter numbers, e.g., 5,3,8,1,4"
        class="border border-gray-300 p-2 rounded w-64"
      />

      <div class="flex items-center space-x-4">
        <label for="speedControl" class="text-gray-700 font-semibold">Speed:</label>
        <input
          type="range"
          id="speedControl"
          min="100"
          max="2000"
          value="500"
          class="slider"
        />
      </div>

      <div class="flex gap-2">
        <button onclick="startMergeSort()" class="custom-button">
          Start
        </button>
        <button onclick="pauseSorting()" class="custom-button">Pause</button>
        <button onclick="resetSorting()" class="custom-button">Reset</button>
      </div>
    </div>
<!-- 
  <div class="flex flex-col items-center mt-12">
      <h2 class="text-xl font-semibold mb-4 text-purple-800 text-center">
        Graph Visualization
      </h2>
      <div id="graph-visualization"></div>
    </div>-->
    
    <div class="description-container">
      <div class="flex justify-center items-center space-x-4">
        <button onclick="toggleContainer('About')" class="custom-button">About</button>
        <button onclick="toggleContainer('Work')" class="custom-button">How does it work</button>
        <button onclick="toggleContainer('Learn')" class="custom-button">Learn More</button>
      </div>

      <div id="About" class="hidden">
    <p>
        <b>Merge Sort</b> is a popular sorting algorithm that follows the <b>divide-and-conquer</b> 
        approach. It is known for its efficiency and stability. Merge Sort divides the input array 
        into two smaller subarrays, recursively sorts those subarrays, and then merges them back together 
        to produce the sorted result.
    </p>
    <ul class="list-disc ml-6 mt-4 text-gray-700">
        <li>
            <b>Steps of Merge Sort:</b>
            <ul class="list-disc ml-6">
                <li>
                    <b>Divide:</b> Recursively divide the array into two halves until the size of the 
                    subarrays becomes 1. Each division step creates smaller subarrays that are easier to sort.
                </li>
                <li>
                    <b>Conquer:</b> Each subarray is sorted individually by recursively applying the merge sort algorithm.
                </li>
                <li>
                    <b>Merge:</b> The sorted subarrays are then merged back together in sorted order. 
                    This is done by comparing the elements of each subarray and placing the smallest element 
                    into the result array. This process continues until all elements from both subarrays are merged.
                </li>
            </ul>
        </li>
        <li>
            <b>Time Complexity:</b>
            <ul class="list-disc ml-6">
                <li><b>Best, worst, and average case:</b> O(n log n) – The time complexity remains logarithmic for all cases 
                    due to the divide-and-conquer approach, with the array being split recursively and then merged.</li>
            </ul>
        </li>
        <li>
            <b>Space Complexity:</b> O(n) – Merge Sort requires additional space to store the subarrays during the merge step.
        </li>
        <li>
            <b>Advantages:</b>
            <ul class="list-disc ml-6">
                <li>Stable: It maintains the relative order of equal elements, which is useful for certain applications.</li>
                <li>Efficient for large datasets, especially when compared to simple algorithms like Bubble Sort and Insertion Sort.</li>
                <li>Works well with linked lists as well as arrays.</li>
            </ul>
        </li>
        <li>
            <b>Disadvantages:</b>
            <ul class="list-disc ml-6">
                <li>Requires additional space (O(n)), which can be a limitation when working with large datasets.</li>
                <li>Slower than some other sorting algorithms (like Quick Sort) in practice for smaller datasets due to the overhead of merging.</li>
            </ul>
        </li>
    </ul>
</div>

    
    

      <div id="Work" class="hidden">
        <h2 class="text-lg font-bold">JavaScript Merge Sort</h2>
        <pre class="line-numbers"><code class="language-javascript">
          function merge(arr, left, mid, right) {
    const n1 = mid - left + 1;
    const n2 = right - mid;

    // Create temp arrays
    const L = new Array(n1);
    const R = new Array(n2);

    // Copy data to temp arrays L[] and R[]
    for (let i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (let j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    let i = 0, j = 0;
    let k = left;

    // Merge the temp arrays back into arr[left..right]
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if there are any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if there are any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

function mergeSort(arr, left, right) {
    if (left >= right)
        return;

    const mid = Math.floor(left + (right - left) / 2);
    mergeSort(arr, left, mid);
    mergeSort(arr, mid + 1, right);
    merge(arr, left, mid, right);
}

function printArray(arr) {
    console.log(arr.join(" "));
}

// Driver code
const arr = [12, 11, 13, 5, 6, 7];
console.log("Given array is");
printArray(arr);

mergeSort(arr, 0, arr.length - 1);

console.log("\nSorted array is");
printArray(arr);

          }
             
        </code></pre>
        <h2 class="text-lg font-bold">Python Merge Sort</h2>
        <pre class="line-numbers"><code class="language-python">
          def merge(arr, left, mid, right):
    n1 = mid - left + 1
    n2 = right - mid

    # Create temp arrays
    L = [0] * n1
    R = [0] * n2

    # Copy data to temp arrays L[] and R[]
    for i in range(n1):
        L[i] = arr[left + i]
    for j in range(n2):
        R[j] = arr[mid + 1 + j]

    i = 0  # Initial index of first subarray
    j = 0  # Initial index of second subarray
    k = left  # Initial index of merged subarray

    # Merge the temp arrays back
    # into arr[left..right]
    while i < n1 and j < n2:
        if L[i] <= R[j]:
            arr[k] = L[i]
            i += 1
        else:
            arr[k] = R[j]
            j += 1
        k += 1

    # Copy the remaining elements of L[],
    # if there are any
    while i < n1:
        arr[k] = L[i]
        i += 1
        k += 1

    # Copy the remaining elements of R[], 
    # if there are any
    while j < n2:
        arr[k] = R[j]
        j += 1
        k += 1

def merge_sort(arr, left, right):
    if left < right:
        mid = (left + right) // 2

        merge_sort(arr, left, mid)
        merge_sort(arr, mid + 1, right)
        merge(arr, left, mid, right)

def print_list(arr):
    for i in arr:
        print(i, end=" ")
    print()

# Driver code
if __name__ == "__main__":
    arr = [12, 11, 13, 5, 6, 7]
    print("Given array is")
    print_list(arr)

    merge_sort(arr, 0, len(arr) - 1)

    print("\nSorted array is")
    print_list(arr)
        </code></pre>
        <h2 class="text-lg font-bold">Java Merge Sort</h2>
        <pre class="line-numbers"><code class="language-java">

          // Java program for Merge Sort
import java.io.*;

class GfG {

    // Merges two subarrays of arr[].
    // First subarray is arr[l..m]
    // Second subarray is arr[m+1..r]
    static void merge(int arr[], int l, int m, int r)
    {
        // Find sizes of two subarrays to be merged
        int n1 = m - l + 1;
        int n2 = r - m;

        // Create temp arrays
        int L[] = new int[n1];
        int R[] = new int[n2];

        // Copy data to temp arrays
        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];

        // Merge the temp arrays

        // Initial indices of first and second subarrays
        int i = 0, j = 0;

        // Initial index of merged subarray array
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        // Copy remaining elements of L[] if any
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        // Copy remaining elements of R[] if any
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    // Main function that sorts arr[l..r] using
    // merge()
    static void sort(int arr[], int l, int r)
    {
        if (l < r) {

            // Find the middle point
            int m = l + (r - l) / 2;

            // Sort first and second halves
            sort(arr, l, m);
            sort(arr, m + 1, r);

            // Merge the sorted halves
            merge(arr, l, m, r);
        }
    }

    // A utility function to print array of size n
    static void printArray(int arr[])
    {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    // Driver code
    public static void main(String args[])
    {
        int arr[] = { 12, 11, 13, 5, 6, 7 };

        System.out.println("Given array is");
        printArray(arr);

        sort(arr, 0, arr.length - 1);

        System.out.println("\nSorted array is");
        printArray(arr);
    }
}
        </code></pre>
      </div>

     <div id="Learn" class="hidden">
        <h2 class="text-lg font-bold text-center">Learn More About Merge Sort</h2>
        <div class="flex justify-center items-center">
          <iframe
            width="560"
            height="315"
            src="https://www.youtube.com/embed/4VqmGXwpLqc?si=QE0z_LEDrikCL0gq"
            title="YouTube video player"
            frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            referrerpolicy="strict-origin-when-cross-origin"
            allowfullscreen>
          </iframe>
        </div>
      </div>
   

    <script>

      function toggleContainer(containerId) {
        const containers = ['About', 'Work', 'Learn'];
        containers.forEach((id) => {
          const container = document.getElementById(id);
          if (id === containerId) {
            container.classList.toggle('hidden');
          } else {
            container.classList.add('hidden');
          }
        });
      }

  
      let array = [];
      let isPaused = false;
      let graph = {};
      let nodes = {};
      let edges = [];

      function displayArray(arr = array) {
        const visualization = document.getElementById("visualization");
        visualization.innerHTML = "";

        const maxValue = Math.max(...arr);
        const containerHeight = 550;

        arr.forEach((value) => {
          const bar = document.createElement("div");
          bar.className = "bar";
          const barHeight = (value / maxValue) * containerHeight;
          bar.style.height = `${barHeight}px`;
          bar.innerText = value;
          visualization.appendChild(bar);
        });
      }

      function displayProcessStep(message) {
        const processContainer = document.getElementById("process");
        const step = document.createElement("div");
        step.className = "text-sm text-gray-700 mb-2";
        step.innerText = message;
        processContainer.appendChild(step);
        processContainer.scrollTop = processContainer.scrollHeight;
      }

      function createGraph(inputArray) {
        graph = {};

        inputArray.forEach((value, index) => {
          graph[value] = [];
          if (index > 0) {
            graph[value].push(inputArray[index - 1]);
            graph[inputArray[index - 1]].push(value);
          }
          if (index < inputArray.length - 1) {
            graph[value].push(inputArray[index + 1]);
          }
        });
        return graph;
      }

      function createGraphVisualization() {
        const container = document.getElementById("graph-visualization");
        container.innerHTML = "";
        nodes = {};
        edges = [];

        const svg = document.createElementNS(
          "http://www.w3.org/2000/svg",
          "svg"
        );
        svg.setAttribute("width", "100%");
        svg.setAttribute("height", "100%");
        container.appendChild(svg);

        const centerX = container.clientWidth / 2;
        const centerY = container.clientHeight / 2;
        const radius = Math.min(centerX, centerY) - 50;
        const nodeCount = Object.keys(graph).length;
        const angleStep = (2 * Math.PI) / nodeCount;

        Object.keys(graph).forEach((node, index) => {
          const angle = index * angleStep;
          const x = centerX + radius * Math.cos(angle);
          const y = centerY + radius * Math.sin(angle);

          const nodeElement = document.createElement("div");
          nodeElement.className = "node";
          nodeElement.innerText = node;
          nodeElement.style.left = `${x - 20}px`;
          nodeElement.style.top = `${y - 20}px`;
          container.appendChild(nodeElement);
          nodes[node] = nodeElement;

          graph[node].forEach((neighbor) => {
            if (parseInt(neighbor) > parseInt(node)) {
              const neighborIndex = Object.keys(graph).indexOf(
                neighbor.toString()
              );
              const neighborAngle = neighborIndex * angleStep;
              const neighborX = centerX + radius * Math.cos(neighborAngle);
              const neighborY = centerY + radius * Math.sin(neighborAngle);

              const line = document.createElementNS(
                "http://www.w3.org/2000/svg",
                "line"
              );
              line.setAttribute("x1", x);
              line.setAttribute("y1", y);
              line.setAttribute("x2", neighborX);
              line.setAttribute("y2", neighborY);
              line.setAttribute("class", "edge");
              svg.appendChild(line);
              edges.push({ element: line, nodes: [node, neighbor] });
            }
          });
        });
      }

      async function startMergeSort() {
        const input = document.getElementById("inputField").value;
        array = input.split(",").map(Number);
        document.getElementById("process").innerHTML = "";
        displayArray(array);
        displayProcessStep(`Starting array: [${array.join(", ")}]`);
        await mergeSort(array, 0, array.length - 1);
        displayProcessStep(`Sorted Array: [${array.join(", ")}]`);
        displayArray(array);
      }

      async function mergeSort(arr, left, right) {
        if (left >= right) return;
        const mid = Math.floor((left + right) / 2);

        await mergeSort(arr, left, mid);
        await mergeSort(arr, mid + 1, right);
        await merge(arr, left, mid, right);
      }

      async function merge(arr, left, mid, right) {
        let leftArray = arr.slice(left, mid + 1);
        let rightArray = arr.slice(mid + 1, right + 1);

        let i = 0,
          j = 0,
          k = left;
        while (i < leftArray.length && j < rightArray.length) {
          if (isPaused) await pauseLoop();

          if (leftArray[i] <= rightArray[j]) {
            arr[k] = leftArray[i];
            i++;
          } else {
            arr[k] = rightArray[j];
            j++;
          }
          displayArray(arr);
          displayProcessStep(
            `Merged: [${arr.slice(left, right + 1).join(", ")}]`
          );
          await sleep(500);
          k++;
        }

        while (i < leftArray.length) {
          arr[k] = leftArray[i];
          i++;
          k++;
        }
        while (j < rightArray.length) {
          arr[k] = rightArray[j];
          j++;
          k++;
        }
        displayArray(arr);
      }

      async function startGraphTraversal() {
        graph = createGraph(array);
        createGraphVisualization();
        displayProcessStep("Starting BFS traversal...");
        await bfs(array[0]);
      }

      async function bfs(start) {
        const visited = new Set();
        const queue = [start];

        while (queue.length > 0) {
          const current = queue.shift();

          if (!visited.has(current)) {
            visited.add(current);
            nodes[current].classList.add("visited");
            displayProcessStep(`Visiting node: ${current}`);

            edges.forEach((edge) => {
              if (edge.nodes.includes(current)) {
                edge.element.classList.add("visited");
              }
            });

            await sleep(500);

            for (const neighbor of graph[current]) {
              if (!visited.has(neighbor)) {
                queue.push(neighbor);
              }
            }
          }
        }
        displayProcessStep("BFS traversal completed!");
      }

      function pauseSorting() {
        isPaused = !isPaused;
      }

      function sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }

      async function pauseLoop() {
        while (isPaused) {
          await sleep(100);
        }
      }
    </script>
  </body>
</html>
