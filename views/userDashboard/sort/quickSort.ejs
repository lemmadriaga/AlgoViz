<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Enhanced Quick Sort Visualization</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />

    <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css"
    rel="stylesheet"
/>
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css"
    rel="stylesheet"
/>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>


    <style>
      .custom-button {
        background-color: #4b0082;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .custom-button:hover {
        background-color: #7b1fa2;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }

      .visualization-container {
        background-color: #f3f4f6;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 400px;
        height: 400px;
        overflow: hidden;
      }

      .bar {
        display: inline-block;
        width: 35px;
        margin: 4px;
        background: linear-gradient(to top, #ff8c00, #ffd700);
        color: white;
        text-align: center;
        font-weight: bold;
        border-radius: 5px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
      }

      .bar.pivot {
        background: linear-gradient(to top, #ff6347, #ff4500);
      }

      .bar.compare {
        background: linear-gradient(to top, #ffdd44, #ffc107);
      }

      .bar.sorted {
        background: linear-gradient(to top, #32cd32, #228b22);
      }

      .step-process-container {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 300px;
        height: 400px;
        overflow-y: auto;
      }

      .description-container {
        background-color: #ffffff; 
        color: #333333; 
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin-left: 330px;
        margin-right: 330px;
        margin-top: 20px;
    
      }

       pre {
        background-color: #f9f9f9; 
        color: #333333; 
        border: 1px solid #ddd; 
        padding: 15px;
        overflow-x: auto; 
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-size: 0.9rem; 
      }

       .line-numbers-rows {
         border-right: 1px solid #e1e4e8;
      }

       .line-numbers .line-numbers-rows > span:before {
        color: #bbb; 
      }


      .slider {
        -webkit-appearance: none;
        width: 100px;
        height: 8px;
        background: #4b0082;
        outline: none;
        opacity: 0.8;
        transition: opacity 0.2s;
        border-radius: 5px;
      }
      .slider:hover {
        opacity: 1;
      }
    </style>
  </head>
  <body class="bg-gray-100 p-4">
    <a href="javascript:history.back()" class="custom-button inline-block">Back</a>

    <div class="text-center mb-2">
      <h1 class="text-3xl font-bold text-purple-900">
        Enhanced Quick Sort Visualization
      </h1>
    </div>

    <div class="flex justify-center space-x-8 mb-6">
      <div class="visualization-container flex justify-center items-center relative">
        <div id="visualization" class="w-full h-full flex items-end justify-center"></div>
      </div>

      <div class="step-process-container overflow-y-auto">
        <h2 class="text-xl font-semibold mb-4 text-purple-800 text-center">
          Sorting Steps
        </h2>
        <div id="process" class="text-gray-700 text-sm"></div>
      </div>
    </div>

    <div class="flex justify-center items-center gap-2">
      <input
        id="inputField"
        type="text"
        placeholder="Enter numbers, e.g., 5,3,8,1,4"
        class="border border-gray-300 p-2 rounded w-64"
      />

      <div class="flex items-center space-x-4">
        <label for="speedControl" class="text-gray-700 font-semibold">Speed:</label>
        <input
          type="range"
          id="speedControl"
          min="100"
          max="2000"
          value="500"
          class="slider"
        />
      </div>

      <div class="flex gap-2">
        <button onclick="startQuickSort()" class="custom-button">Start</button>
        <button onclick="pauseSorting()" class="custom-button">Pause</button>
        <button onclick="resetSorting()" class="custom-button">Reset</button>
      </div>
    </div>

    <div class="description-container">
      <div class="flex justify-center items-center space-x-4 mb-4">
        <button onclick="toggleContainer('About')" class="custom-button">About</button>
        <button onclick="toggleContainer('Work')" class="custom-button">How does it work</button>
        <button onclick="toggleContainer('Learn')" class="custom-button">Learn More</button>
      </div>

      <div id="About" class="hidden">
        <p>
            <b>Quick Sort</b> is a highly efficient sorting algorithm that uses a 
            <b>divide-and-conquer</b> approach to sort elements. It is significantly faster than 
            Bubble Sort and is often used in practice for large datasets. The algorithm divides 
            the array into smaller sub-arrays based on a <b>pivot</b> element and recursively sorts them.
        </p>
        <ul class="list-disc ml-6 mt-4 text-gray-700">
            <li>
                A <b>pivot</b> is chosen (usually the first, last, or middle element, 
                or chosen randomly). The pivot is used to partition the array into two parts:
                <ul class="list-disc ml-6">
                    <li>Elements <b>smaller than the pivot</b> are placed on the left.</li>
                    <li>Elements <b>greater than the pivot</b> are placed on the right.</li>
                </ul>
            </li>
            <li>
                Once partitioning is complete, the pivot element is in its correct position in 
                the sorted array.
            </li>
            <li>
                The algorithm then recursively applies the same process to the left and right 
                sub-arrays until all sub-arrays are sorted.
            </li>
            <li>
                <b>Time Complexity:</b>
                <ul class="list-disc ml-6">
                    <li><b>Best case:</b> O(n log n) – achieved when the pivot divides the array 
                        into two equal halves.</li>
                    <li><b>Worst case:</b> O(n²) – occurs when the pivot is poorly chosen, 
                        leading to highly unbalanced partitions (e.g., if the array is already 
                        sorted).</li>
                    <li><b>Average case:</b> O(n log n).</li>
                </ul>
            </li>
            <li>
                <b>Advantages:</b> 
                <ul class="list-disc ml-6">
                    <li>Highly efficient for large datasets.</li>
                    <li>Works well for both in-memory and external sorting.</li>
                    <li>Can be implemented in a <b>non-recursive</b> way using a stack for 
                        iterative partitioning.</li>
                </ul>
            </li>
            <li>
                <b>Disadvantages:</b>
                <ul class="list-disc ml-6">
                    <li>Not a <b>stable sorting algorithm</b>, meaning it does not preserve 
                        the relative order of equal elements.</li>
                    <li>Performance is highly dependent on the choice of the pivot.</li>
                    <li>Recursive implementation can cause stack overflow for very large arrays.</li>
                </ul>
            </li>
            <li>
                Quick Sort is widely used in practice, particularly when implemented with 
                optimizations like <b>randomized pivot selection</b> or <b>hybrid algorithms</b> 
                (e.g., switching to Insertion Sort for small sub-arrays).
            </li>
        </ul>
    </div>
    
    
    

      <div id="Work" class="hidden">
        <h2 class="text-lg font-bold">JavaScript Quick Sort</h2>
        <pre class="line-numbers"><code class="language-javascript">
          // Partition function
          function partition(arr, low, high)
          {
          
              // Choose the pivot
              let pivot = arr[high];
          
              // Index of smaller element and indicates
              // the right position of pivot found so far
              let i = low - 1;
          
              // Traverse arr[low..high] and move all smaller
              // elements to the left side. Elements from low to
              // i are smaller after every iteration
              for (let j = low; j <= high - 1; j++) {
                  if (arr[j] < pivot) {
                      i++;
                      swap(arr, i, j);
                  }
              }
          
              // Move pivot after smaller elements and
              // return its position
              swap(arr, i + 1, high);
              return i + 1;
          }
          
          // Swap function
          function swap(arr, i, j)
          {
              let temp = arr[i];
              arr[i] = arr[j];
              arr[j] = temp;
          }
          
          // The QuickSort function implementation
          function quickSort(arr, low, high)
          {
              if (low < high) {
          
                  // pi is the partition return index of pivot
                  let pi = partition(arr, low, high);
          
                  // Recursion calls for smaller elements
                  // and greater or equals elements
                  quickSort(arr, low, pi - 1);
                  quickSort(arr, pi + 1, high);
              }
          }
          
          // Main driver code
          let arr = [ 10, 7, 8, 9, 1, 5 ];
          let n = arr.length;
          
          // Call QuickSort on the entire array
          quickSort(arr, 0, n - 1);
          for (let i = 0; i < arr.length; i++) {
              console.log(arr[i] + " ");
          }
          
             
        </code></pre>
        <h2 class="text-lg font-bold">Python Quick Sort</h2>
        <pre class="line-numbers"><code class="language-python">
          # Partition function
          def partition(arr, low, high):
              
              # Choose the pivot
              pivot = arr[high]
              
              # Index of smaller element and indicates 
              # the right position of pivot found so far
              i = low - 1
              
              # Traverse arr[low..high] and move all smaller
              # elements to the left side. Elements from low to 
              # i are smaller after every iteration
              for j in range(low, high):
                  if arr[j] < pivot:
                      i += 1
                      swap(arr, i, j)
              
              # Move pivot after smaller elements and
              # return its position
              swap(arr, i + 1, high)
              return i + 1
          
          # Swap function
          def swap(arr, i, j):
              arr[i], arr[j] = arr[j], arr[i]
          
          # The QuickSort function implementation
          def quickSort(arr, low, high):
              if low < high:
                  
                  # pi is the partition return index of pivot
                  pi = partition(arr, low, high)
                  
                  # Recursion calls for smaller elements
                  # and greater or equals elements
                  quickSort(arr, low, pi - 1)
                  quickSort(arr, pi + 1, high)
          
          # Main driver code
          if __name__ == "__main__":
              arr = [10, 7, 8, 9, 1, 5]
              n = len(arr)
          
              quickSort(arr, 0, n - 1)
              
              for val in arr:
                  print(val, end=" ")
        </code></pre>
        <h2 class="text-lg font-bold">Java Quick Sort</h2>
        <pre class="line-numbers"><code class="language-java">
          import java.util.Arrays;

          class GfG {
          
              // Partition function
              static int partition(int[] arr, int low, int high) {
                  
                  // Choose the pivot
                  int pivot = arr[high];
                  
                  // Index of smaller element and indicates 
                  // the right position of pivot found so far
                  int i = low - 1;
          
                  // Traverse arr[low..high] and move all smaller
                  // elements to the left side. Elements from low to 
                  // i are smaller after every iteration
                  for (int j = low; j <= high - 1; j++) {
                      if (arr[j] < pivot) {
                          i++;
                          swap(arr, i, j);
                      }
                  }
                  
                  // Move pivot after smaller elements and
                  // return its position
                  swap(arr, i + 1, high);  
                  return i + 1;
              }
          
              // Swap function
              static void swap(int[] arr, int i, int j) {
                  int temp = arr[i];
                  arr[i] = arr[j];
                  arr[j] = temp;
              }
          
              // The QuickSort function implementation
              static void quickSort(int[] arr, int low, int high) {
                  if (low < high) {
                      
                      // pi is the partition return index of pivot
                      int pi = partition(arr, low, high);
          
                      // Recursion calls for smaller elements
                      // and greater or equals elements
                      quickSort(arr, low, pi - 1);
                      quickSort(arr, pi + 1, high);
                  }
              }
          
              public static void main(String[] args) {
                  int[] arr = {10, 7, 8, 9, 1, 5};
                  int n = arr.length;
                
                  quickSort(arr, 0, n - 1);
                  
                  for (int val : arr) {
                      System.out.print(val + " ");  
                  }
              }
          }
        </code></pre>
      </div>
    </div>
    </div>

    <script>
      function toggleContainer(containerId) {
        const containers = ['About', 'Work'];
        containers.forEach((id) => {
          const container = document.getElementById(id);
          if (id === containerId) {
            container.classList.toggle('hidden');
          } else {
            container.classList.add('hidden');
          }
        });
      }



      let array = [];
      let isPaused = false;
      let intervalId;
      let speed = 500;
      let i = 0;
      let j = 0;

      function validateInput() {
        const inputField = document.getElementById("inputField");
        const input = inputField.value.trim();

        inputField.setCustomValidity("");

        if (!input) {
          inputField.setCustomValidity("Input should not be empty.");
          return false;
        }

        if (/,,|[^0-9,]/.test(input)) {
          inputField.setCustomValidity("Incorrect format. Use valid numbers separated by single commas.");
          return false;
        }

        const inputArray = input.split(",");

        if (inputArray.some((value) => value === "")) {
          inputField.setCustomValidity("Incorrect format. Avoid empty elements or trailing commas.");
          return false;
        }

        if (inputArray.length < 1 || inputArray.length > 10) {
          inputField.setCustomValidity("Only 1-10 numbers are allowed.");
          return false;
        }

        if (inputArray.some((value) => parseInt(value, 10) < 0 || parseInt(value, 10) > 9)) {
          inputField.setCustomValidity("Only numbers between 0-9 are allowed.");
          return false;
        }

        return true;
      }

      function displayArray() {
        const visualization = document.getElementById("visualization");
        visualization.innerHTML = "";

        const maxValue = Math.max(...array);
        const containerHeight = 400;

        array.forEach((value, index) => {
          const bar = document.createElement("div");
          bar.className = "bar";
          const barHeight = ((value / maxValue) * containerHeight) - 50;
          bar.style.height = `${barHeight}px`;
          bar.innerText = value;

          if (index === j) bar.classList.add("compare");
          if (index === i) bar.classList.add("pivot");
          if (index < i) bar.classList.add("sorted");

          visualization.appendChild(bar);
        });
      }

      function displayProcessStep(message) {
        const processContainer = document.getElementById("process");
        const step = document.createElement("div");
        step.className = "text-sm text-gray-700 mb-2";
        step.innerText = message;
        processContainer.appendChild(step);
        processContainer.scrollTop = processContainer.scrollHeight;
      }

      function startQuickSort() {
        const inputField = document.getElementById("inputField");

        if (!validateInput()) {
          inputField.reportValidity();
          return;
        }

        const input = inputField.value;
        array = input.split(",").map(Number);
        i = 0;
        j = 0;
        isPaused = false;
        document.getElementById("process").innerHTML = "";
        quickSort(array, 0, array.length - 1);
      }

      async function quickSort(arr, low, high) {
        if (low < high && !isPaused) {
          let pivotIndex = await partition(arr, low, high);
          displayArray();
          displayProcessStep(`Pivot at index ${pivotIndex}: [${arr.join(", ")}]`);

          await quickSort(arr, low, pivotIndex - 1);
          await quickSort(arr, pivotIndex + 1, high);
        } else if (low >= high) {
          displayArray();
          displayProcessStep(`Sorted Array: [${arr.join(", ")}]`);
          markSorted(); // Mark the bars as sorted
        }
      }

      async function partition(arr, low, high) {
        let pivot = arr[high];
        let i = low - 1;

        displayProcessStep(`Choosing pivot: ${pivot} at index ${high}`);

        for (let j = low; j < high; j++) {
          if (isPaused) return;
          if (arr[j] < pivot) {
            i++;
            [arr[i], arr[j]] = [arr[j], arr[i]];
            displayArray();
            displayProcessStep(`Swapping: ${arr[i]} ↔ ${arr[j]}`);
            await sleep(speed);
          }
        }
        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];
        displayArray();
        displayProcessStep(`Pivot swapped: ${arr[i + 1]} ↔ ${pivot}`);
        await sleep(speed);
        return i + 1;
      }

      function markSorted() {
        const visualization = document.getElementById("visualization");
        const bars = visualization.querySelectorAll(".bar");
        bars.forEach((bar) => {
          bar.classList.add("sorted");
        });
      }

      function sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }

      function pauseSorting() {
        isPaused = !isPaused;
      }

      function resetSorting() {
        clearInterval(intervalId);
        document.getElementById("visualization").innerHTML = "";
        document.getElementById("process").innerHTML = "";
        document.getElementById("inputField").value = "";
        array = [];
        i = 0;
        j = 0;
        isPaused = false;
      }
    </script>
  </body>
</html>
