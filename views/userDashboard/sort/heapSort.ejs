<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Heap Sort | AlgoViz</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <style>
      /* Styling for Buttons and Controls */
      .custom-button {
        background-color: #5800ff;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .custom-button:hover {
        background-color: #7f00ff;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }

      /* Styling for the Visualization Box */
      .visualization-container {
        background-color: #f3f4f6;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 90%; /* Width of the container */
        height: 600px; /* Height of the container */
        overflow: hidden; /* Prevent overflow */
      }

      /* Styling for Bars */
      .bar {
        display: inline-block;
        width: 30px; /* Width of each bar */
        margin: 4px;
        background: linear-gradient(to top, #ff8c00, #ffd700);
        color: white;
        text-align: center;
        font-weight: bold;
        border-radius: 5px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
      }
      .bar.selected {
        background: linear-gradient(to top, #32cd32, #228b22);
      }

      /* Styling for Step Process Box */
      .step-process-container {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
      }
    </style>
  </head>
  <body class="bg-white p-8">
    <!-- Back Button -->
    <a href="javascript:history.back()" class="custom-button mb-4 inline-block"
      >Back</a
    >

    <!-- Header -->
    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold text-purple-900">
        Heap Sort Visualization
      </h1>
    </div>

    <!-- Visualization Containers -->
    <div class="flex justify-center space-x-8 mb-8">
      <!-- Main Sorting Visualization Box -->
      <div
        class="visualization-container flex justify-center items-center relative"
      >
        <div
          id="visualization"
          class="w-full h-full flex items-end justify-center"
        ></div>
      </div>

      <!-- Step-by-Step Process Box -->
      <div class="step-process-container w-1/3 h-96 overflow-y-auto">
        <h2 class="text-xl font-semibold mb-4 text-purple-800 text-center">
          Sorting Steps
        </h2>
        <div id="process" class="text-gray-700 text-sm"></div>
      </div>
    </div>

    <!-- Input and Buttons -->
    <div class="flex flex-col items-center space-y-4">
      <input
        id="inputField"
        type="text"
        placeholder="Enter numbers, e.g., 5,3,8,1,4"
        class="border border-gray-300 p-2 rounded w-64 mb-4"
      />

      <!-- Start and Pause Buttons -->
      <div class="flex space-x-4 mt-4">
        <button onclick="startHeapSort()" class="custom-button">Start</button>
        <button onclick="pauseSorting()" class="custom-button">Pause</button>
      </div>
    </div>

    <script>
      let array = [];
      let isPaused = false;

      function displayArray(selectedIndex = -1) {
        const visualization = document.getElementById("visualization");
        visualization.innerHTML = ""; // Clear previous elements

        // Determine the maximum value in the array to scale bars appropriately
        const maxValue = Math.max(...array);
        const containerHeight = 550; // Total height available for bars in the container

        array.forEach((value, index) => {
          const bar = document.createElement("div");
          bar.className = "bar";

          // Scale the bar height relative to the max value and container height
          const barHeight = (value / maxValue) * containerHeight;
          bar.style.height = `${barHeight}px`;
          bar.innerText = value;

          if (index === selectedIndex) bar.classList.add("selected");
          visualization.appendChild(bar);
        });
      }

      function displayProcessStep(message) {
        const processContainer = document.getElementById("process");
        const step = document.createElement("div");
        step.className = "text-sm text-gray-700 mb-2";
        step.innerText = message;
        processContainer.appendChild(step);
        processContainer.scrollTop = processContainer.scrollHeight; // Scroll to the latest step
      }

      async function startHeapSort() {
        const input = document.getElementById("inputField").value;
        array = input.split(",").map(Number);
        document.getElementById("process").innerHTML = ""; // Clear previous steps
        displayArray();
        displayProcessStep(`Starting array: [${array.join(", ")}]`);

        // Build max heap
        for (let i = Math.floor(array.length / 2) - 1; i >= 0; i--) {
          await heapify(array, array.length, i);
        }

        // One by one extract an element from heap
        for (let i = array.length - 1; i > 0; i--) {
          // Move current root to end
          [array[0], array[i]] = [array[i], array[0]];
          displayArray(i); // Highlight the root that is being moved
          displayProcessStep(`Swapped ${array[0]} with ${array[i]}`);
          await sleep(500);

          // Call max heapify on the reduced heap
          await heapify(array, i, 0);
        }

        displayProcessStep(`Sorted Array: [${array.join(", ")}]`);
        displayArray(); // Display final sorted array
      }

      async function heapify(arr, n, i) {
        let largest = i;
        const left = 2 * i + 1;
        const right = 2 * i + 2;

        // If left child is larger than root
        if (left < n && arr[left] > arr[largest]) {
          largest = left;
        }

        // If right child is larger than largest so far
        if (right < n && arr[right] > arr[largest]) {
          largest = right;
        }

        // If largest is not root
        if (largest !== i) {
          [arr[i], arr[largest]] = [arr[largest], arr[i]];
          displayArray(largest); // Highlight the new root of the heap
          displayProcessStep(`Heapify: Swapped ${arr[i]} with ${arr[largest]}`);
          await sleep(500);

          // Recursively heapify the affected sub-tree
          await heapify(arr, n, largest);
        }
      }

      function pauseSorting() {
        isPaused = !isPaused; // Toggle pause
      }

      function sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }

      async function pauseLoop() {
        while (isPaused) {
          await sleep(100);
        }
      }
    </script>
  </body>
</html>
