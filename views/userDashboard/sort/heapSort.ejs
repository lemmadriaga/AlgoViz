<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Enhanced Heap Sort Visualization</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />

    <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css"
    rel="stylesheet"
/>
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css"
    rel="stylesheet"
/>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>
    <style>
      .custom-button {
        background-color: #1E201E;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .custom-button:hover {
        background-color: #697565;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }

      .visualization-container {
        background-color: #f3f4f6;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 400px;
        height: 400px;
        overflow: hidden;
      }

      .bar {
        display: inline-block;
        width: 35px;
        margin: 4px;
        background: linear-gradient(to top, #ff8c00, #ffd700);
        color: white;
        text-align: center;
        font-weight: bold;
        border-radius: 5px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
      }
      .bar.selected {
        background: linear-gradient(to top, #32cd32, #228b22);
      }
      .bar.compare {
        background: linear-gradient(to top, #ffdd44, #ffc107);
      }
      .bar.swap {
        background: linear-gradient(to top, #ff6347, #ff4500);
      }
      .bar.sorted {
        background: linear-gradient(to top, #32cd32, #228b22);
      }

      .step-process-container {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 300px;
        height: 400px;
        overflow-y-auto;
      }

      .description-container {
        background-color: #ffffff; 
        color: #333333; 
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin-left: 270px;
        margin-right: 270px;
        margin-top: 20px;
      }

       pre {
        background-color: #f9f9f9; 
        color: #333333; 
        border: 1px solid #ddd; 
        border-radius: 5px;
        padding: 15px;
        overflow-x: auto; 
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-size: 0.9rem; 
      }

       .line-numbers-rows {
         border-right: 1px solid #e1e4e8;
      }

       .line-numbers .line-numbers-rows > span:before {
        color: #bbb; 
      }

      .slider {
        -webkit-appearance: none;
        width: 100px;
        height: 8px;
        background: #1E201E;
        outline: none;
        opacity: 0.8;
        transition: opacity 0.2s;
        border-radius: 5px;
      }
      .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 18px; 
        height: 18px; 
        background: #697565; 
        border-radius: 50%; 
        cursor: pointer; 
      }

      .slider:hover {
        opacity: 1;
      }
    </style>
  </head>
  <body class="bg-gray-100 p-4">
    <a href="javascript:history.back()" class="custom-button inline-block">Back</a>

    <div class="text-center mb-2">
      <h1 class="text-3xl font-bold text-[#1E201E]">
        Enhanced Heap Sort Visualization
      </h1>
    </div>

    <div class="flex justify-center space-x-8 mb-6">
      <div class="visualization-container flex justify-center items-center relative">
        <div id="visualization" class="w-full h-full flex items-end justify-center"></div>
      </div>

      <div class="step-process-container overflow-y-auto">
        <h2 class="text-xl font-semibold mb-4 text-[#1E201E] text-center">
          Sorting Steps
        </h2>
        <div id="process" class="text-gray-700 text-sm"></div>
      </div>
    </div>

    <div class="flex justify-center items-center gap-4">
      <input
        id="inputField"
        type="text"
        placeholder="Enter numbers, e.g., 5,3,8,1,4"
        class="border border-gray-300 p-2 rounded w-64"
      />

      <div class="flex items-center space-x-4">
        <label for="speedControl" class="text-gray-700 font-semibold">Speed:</label>
        <input
          type="range"
          id="speedControl"
          min="100"
          max="2000"
          value="500"
          class="slider"
        />
      </div>

      <div class="flex gap-2">
        <button onclick="startHeapSort()" class="custom-button">Start</button>
        <button onclick="pauseSorting()" class="custom-button">Pause</button>
        <button onclick="resetSorting()" class="custom-button">Reset</button>
      </div>
    </div>

    <div class="description-container">
      <div class="flex justify-center items-center space-x-4">
        <button onclick="toggleContainer('About')" class="custom-button">About</button>
        <button onclick="toggleContainer('Work')" class="custom-button">How does it work</button>
        <button onclick="toggleContainer('Learn')" class="custom-button">Learn More</button>
      </div>


      <div id="About" class="hidden">
        <p>
            <b>Heap Sort</b> is a comparison-based sorting algorithm that uses a binary heap 
            data structure. It is an <b>in-place sorting algorithm</b> but is not stable. 
            Heap Sort leverages the properties of a <b>Max Heap</b> or <b>Min Heap</b> to sort 
            elements efficiently. 
        </p>
        <ul class="list-disc ml-6 mt-4 text-gray-700">
            <li>
                <b>Steps of Heap Sort:</b>
                <ul class="list-disc ml-6">
                    <li>
                        Convert the array into a <b>Max Heap</b> using the <b>heapify</b> process. 
                        This rearranges the array elements so that the largest element is at the 
                        root of the heap. This process happens <b>in-place</b>, requiring no additional memory.
                    </li>
                    <li>
                        Once the Max Heap is formed, repeat the following steps until only one 
                        element remains in the heap:
                        <ul class="list-disc ml-6">
                            <li>
                                Swap the <b>root element</b> (largest element in the current heap) 
                                with the <b>last element</b> of the heap.
                            </li>
                            <li>
                                Remove the last element of the heap (which is now sorted and in 
                                its correct position). This is done by reducing the size of the heap, 
                                not by actually removing the element from the array.
                            </li>
                            <li>
                                <b>Heapify</b> the remaining elements to restore the Max Heap property.
                            </li>
                        </ul>
                    </li>
                    <li>
                        Repeat the above process until all elements are sorted. The sorted array 
                        is obtained in <b>descending order</b> if using a Max Heap. For ascending 
                        order, reverse the array or use a Min Heap.
                    </li>
                </ul>
            </li>
            <li>
                <b>Time Complexity:</b>
                <ul class="list-disc ml-6">
                    <li><b>Building the heap:</b> O(n).</li>
                    <li><b>Heapifying:</b> O(log n) per element.</li>
                    <li><b>Total complexity:</b> O(n log n).</li>
                </ul>
            </li>
            <li>
                <b>Space Complexity:</b> O(1) â€“ Heap Sort is an in-place sorting algorithm.
            </li>
            <li>
                <b>Advantages:</b>
                <ul class="list-disc ml-6">
                    <li>Efficient with O(n log n) time complexity for all cases (best, worst, average).</li>
                    <li>In-place sorting, requiring no additional memory.</li>
                    <li>Not dependent on the input order of elements.</li>
                </ul>
            </li>
            <li>
                <b>Disadvantages:</b>
                <ul class="list-disc ml-6">
                    <li>Not a <b>stable sorting algorithm</b>, meaning it does not preserve the 
                        relative order of equal elements.</li>
                    <li>Heapify operations can be complex to implement.</li>
                </ul>
            </li>
        </ul>
    </div>
    
  
  

    <div id="Work" class="hidden">
      <h2 class="text-lg font-bold">JavaScript Heap Sort</h2>
      <pre class="line-numbers"><code class="language-javascript">
        // To heapify a subtree rooted with node i
        // which is an index in arr[].
        function heapify(arr, n, i) {
        
            // Initialize largest as root
            let largest = i;
            
            // left index = 2*i + 1
            let l = 2 * i + 1; 
            
            // right index = 2*i + 2
            let r = 2 * i + 2; 
        
            // If left child is larger than root
            if (l < n && arr[l] > arr[largest]) {
                largest = l;
            }
        
            // If right child is larger than largest so far
            if (r < n && arr[r] > arr[largest]) {
                largest = r;
            }
        
            // If largest is not root
            if (largest !== i) {
                let temp = arr[i]; // Swap
                arr[i] = arr[largest];
                arr[largest] = temp;
        
                // Recursively heapify the affected sub-tree
                heapify(arr, n, largest);
            }
        }
        
        // Main function to do heap sort
        function heapSort(arr) {
            let n = arr.length;
        
            // Build heap (rearrange array)
            for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {
                heapify(arr, n, i);
            }
        
            // One by one extract an element from heap
            for (let i = n - 1; i > 0; i--) {
            
                // Move current root to end
                let temp = arr[0];
                arr[0] = arr[i];
                arr[i] = temp;
        
                // Call max heapify on the reduced heap
                heapify(arr, i, 0);
            }
        }
        
        // A utility function to print array of size n
        function printArray(arr) {
            for (let i = 0; i < arr.length; i++) {
                console.log(arr[i] + " ");
            }
            console.log();
        }
        
        // Driver's code
        let arr = [9, 4, 3, 8, 10, 2, 5];
        heapSort(arr);
        console.log("Sorted array is ");
        printArray(arr);
        
           
      </code></pre>
      <h2 class="text-lg font-bold">Python Heap Sort</h2>
      <pre class="line-numbers"><code class="language-python">
        # Python program for implementation of heap Sort

        # To heapify a subtree rooted with node i
        # which is an index in arr[].
        def heapify(arr, n, i):
            
             # Initialize largest as root
            largest = i 
            
            #  left index = 2*i + 1
            l = 2 * i + 1 
            
            # right index = 2*i + 2
            r = 2 * i + 2  
        
            # If left child is larger than root
            if l < n and arr[l] > arr[largest]:
                largest = l
        
            # If right child is larger than largest so far
            if r < n and arr[r] > arr[largest]:
                largest = r
        
            # If largest is not root
            if largest != i:
                arr[i], arr[largest] = arr[largest], arr[i]  # Swap
        
                # Recursively heapify the affected sub-tree
                heapify(arr, n, largest)
        
        # Main function to do heap sort
        def heapSort(arr):
            
            n = len(arr) 
        
            # Build heap (rearrange array)
            for i in range(n // 2 - 1, -1, -1):
                heapify(arr, n, i)
        
            # One by one extract an element from heap
            for i in range(n - 1, 0, -1):
              
                # Move root to end
                arr[0], arr[i] = arr[i], arr[0] 
        
                # Call max heapify on the reduced heap
                heapify(arr, i, 0)
        
        def printArray(arr):
            for i in arr:
                print(i, end=" ")
            print()
        
        # Driver's code
        arr = [9, 4, 3, 8, 10, 2, 5] 
        heapSort(arr)
        print("Sorted array is ")
        printArray(arr)
      </code></pre>
      <h2 class="text-lg font-bold">Java Heap Sort</h2>
      <pre class="line-numbers"><code class="language-java">

        import java.util.Arrays;

        class GfG {
          
            // To heapify a subtree rooted with node i
            // which is an index in arr[].
            static void heapify(int arr[], int n, int i) {
        
                // Initialize largest as root
                int largest = i; 
        
                // left index = 2*i + 1
                int l = 2 * i + 1; 
        
                // right index = 2*i + 2
                int r = 2 * i + 2;
        
                // If left child is larger than root
                if (l < n && arr[l] > arr[largest]) {
                    largest = l;
                }
        
                // If right child is larger than largest so far
                if (r < n && arr[r] > arr[largest]) {
                    largest = r;
                }
        
                // If largest is not root
                if (largest != i) {
                    int temp = arr[i];
                    arr[i] = arr[largest];
                    arr[largest] = temp;
        
                    // Recursively heapify the affected sub-tree
                    heapify(arr, n, largest);
                }
            }
        
            // Main function to do heap sort
            static void heapSort(int arr[]) {
                int n = arr.length;
        
                // Build heap (rearrange array)
                for (int i = n / 2 - 1; i >= 0; i--) {
                    heapify(arr, n, i);
                }
        
                // One by one extract an element from heap
                for (int i = n - 1; i > 0; i--) {
        
                    // Move current root to end
                    int temp = arr[0]; 
                    arr[0] = arr[i];
                    arr[i] = temp;
        
                    // Call max heapify on the reduced heap
                    heapify(arr, i, 0);
                }
            }
        
            // A utility function to print array of size n
            static void printArray(int arr[]) {
                for (int i = 0; i < arr.length; i++) {
                    System.out.print(arr[i] + " ");
                }
                System.out.println();
            }
        
            // Driver's code
            public static void main(String args[]) {
                int arr[] = {9, 4, 3, 8, 10, 2, 5}; 
                heapSort(arr);
                System.out.println("Sorted array is ");
                printArray(arr);
            }
        }
      </code></pre>
    </div>

  <div id="Learn" class="hidden">
        <h2 class="text-lg font-bold text-center">Learn More About Heap Sort</h2>
        <div class="flex justify-center items-center">
          <iframe
          width="560"
          height="315"
          src="https://www.youtube.com/embed/2DmK_H7IdTo?si=xRLO7R26I5gVJ_38"
          title="YouTube video player"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
          referrerpolicy="strict-origin-when-cross-origin"
          allowfullscreen>
        </iframe>        
        </div>
      </div>
    

    <script>
       function toggleContainer(containerId) {
        const containers = ['About', 'Work', 'Learn'];
        containers.forEach((id) => {
          const container = document.getElementById(id);
          if (id === containerId) {
            container.classList.toggle('hidden');
          } else {
            container.classList.add('hidden');
          }
        });
      }

      let array = [];
      let isPaused = false;
      let intervalId;
      let speed = 500;
      let i = 0;

      document
        .getElementById("speedControl")
        .addEventListener("input", (event) => {
          speed = event.target.value;
          if (intervalId) {
            clearInterval(intervalId);
            intervalId = setInterval(startHeapSort, speed);
          }
        });

      function validateInput() {
        const inputField = document.getElementById("inputField");
        const input = inputField.value.trim();

        inputField.setCustomValidity("");

        if (!input) {
          inputField.setCustomValidity("Input should not be empty.");
          return false;
        }

        if (/,,|[^0-9,]/.test(input)) {
          inputField.setCustomValidity("Incorrect format. Use valid numbers separated by single commas.");
          return false;
        }

        const inputArray = input.split(",");
        
        if (inputArray.some((value) => value === "")) {
          inputField.setCustomValidity("Incorrect format. Avoid empty elements or trailing commas.");
          return false;
        }

        if (inputArray.length < 1 || inputArray.length > 10) {
          inputField.setCustomValidity("Only 1-10 numbers are allowed.");
          return false;
        }

        if (inputArray.some((value) => parseInt(value, 10) < 0 || parseInt(value, 10) > 9)) {
          inputField.setCustomValidity("Only numbers between 0-9 are allowed.");
          return false;
        }

        return true;
      }

      function displayArray(selectedIndex = -1, isSorted = false, swappedIndex = -1) {
        const visualization = document.getElementById("visualization");
        visualization.innerHTML = "";

        const maxValue = Math.max(...array);
        const containerHeight = 400;

        array.forEach((value, index) => {
          const bar = document.createElement("div");
          bar.className = "bar";

          const barHeight = ((value / maxValue) * containerHeight) - 50;
          bar.style.height = `${barHeight}px`;
          bar.innerText = value;

          if (index === selectedIndex || index === swappedIndex) bar.classList.add("swap");
          if (isSorted) bar.classList.add("sorted");

          visualization.appendChild(bar);
        });
      }

      function displayProcessStep(message) {
        const processContainer = document.getElementById("process");
        const step = document.createElement("div");
        step.className = "text-sm text-gray-700 mb-2";
        step.innerText = message;
        processContainer.appendChild(step);
        processContainer.scrollTop = processContainer.scrollHeight;
      }

      async function startHeapSort() {
        if (isPaused) return;
        const inputField = document.getElementById("inputField");

        if (!validateInput()) {
          inputField.reportValidity();
          return;
        }

        const input = inputField.value;
        array = input.split(",").map(Number);
        document.getElementById("process").innerHTML = "";
        displayArray();
        displayProcessStep(`Starting array: [${array.join(", ")}]`);

        for (let i = Math.floor(array.length / 2) - 1; i >= 0; i--) {
          await heapify(array, array.length, i);
        }

        for (let i = array.length - 1; i > 0; i--) {
          if (isPaused) return;
          [array[0], array[i]] = [array[i], array[0]];
          displayArray(0, false, i);
          displayProcessStep(`Swapped ${array[0]} with ${array[i]}`);
          await sleep(speed);

          await heapify(array, i, 0);
        }

        displayProcessStep(`Sorted Array: [${array.join(", ")}]`);
        displayArray(-1, true);
      }

      async function heapify(arr, n, i) {
        if (isPaused) return;
        let largest = i;
        const left = 2 * i + 1;
        const right = 2 * i + 2;

        if (left < n && arr[left] > arr[largest]) largest = left;
        if (right < n && arr[right] > arr[largest]) largest = right;

        if (largest !== i) {
          [arr[i], arr[largest]] = [arr[largest], arr[i]];
          displayArray(i, false, largest);
          displayProcessStep(`Heapify step: Swapped ${arr[i]} with ${arr[largest]}`);
          await sleep(speed);

          await heapify(arr, n, largest);
        }
      }

      function sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }

      function pauseSorting() {
        isPaused = !isPaused;
        if (!isPaused) {
          startHeapSort();
        }
      }

      function resetSorting() {
        clearInterval(intervalId);
        intervalId = null;
        isPaused = false;
        array = [];
        displayArray();
        document.getElementById("inputField").value = "";
        document.getElementById("process").innerHTML = "";
      }
    </script>
  </body>
</html>
