<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Enhanced Selection Sort Visualization</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <style>
      .custom-button {
        background-color: #4b0082;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .custom-button:hover {
        background-color: #7b1fa2;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }

      .visualization-container {
        background-color: #f3f4f6;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 400px;
        height: 400px;
        overflow: hidden;
      }

      .bar {
        display: inline-block;
        width: 35px;
        margin: 4px;
        background: linear-gradient(to top, #ff8c00, #ffd700);
        color: white;
        text-align: center;
        font-weight: bold;
        border-radius: 5px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
      }
      .bar.selected {
        background: linear-gradient(to top, #32cd32, #228b22);
      }
      .bar.min {
        background: linear-gradient(to top, #ff6347, #ff4500);
      }

      .step-process-container {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 300px;
        height: 400px;
        overflow-y: auto;
      }

      .slider {
        -webkit-appearance: none;
        width: 100px;
        height: 8px;
        background: #4b0082;
        outline: none;
        opacity: 0.8;
        transition: opacity 0.2s;
        border-radius: 5px;
      }
      .slider:hover {
        opacity: 1;
      }
    </style>
  </head>
  <body class="bg-gray-100 p-4">
    <a href="javascript:history.back()" class="custom-button inline-block"
      >Back</a
    >

    <div class="text-center mb-2">
      <h1 class="text-3xl font-bold text-purple-900">
        Enhanced Selection Sort Visualization
      </h1>
    </div>

    <div class="flex justify-center space-x-8 mb-6">
      <div
        class="visualization-container flex justify-center items-center relative"
      >
        <div
          id="visualization"
          class="w-full h-full flex items-end justify-center"
        ></div>
      </div>

      <div class="step-process-container">
        <h2 class="text-xl font-semibold mb-4 text-purple-800 text-center">
          Sorting Steps
        </h2>
        <div id="process" class="text-gray-700 text-sm"></div>
      </div>
    </div>

    <div class="flex justify-center items-center gap-2">
      <input
        id="inputField"
        type="text"
        placeholder="Enter numbers, e.g., 5,3,8,1,4"
        class="border border-gray-300 p-2 rounded w-64"
      />

      <div class="flex items-center space-x-4">
        <label for="speedControl" class="text-gray-700 font-semibold"
          >Speed:</label
        >
        <input
          type="range"
          id="speedControl"
          min="100"
          max="2000"
          value="500"
          class="slider"
        />
      </div>

      <div class="flex gap-2">
        <button onclick="startSelectionSort()" class="custom-button">
          Start
        </button>
        <button onclick="pauseSorting()" class="custom-button">Pause</button>
        <button onclick="resetSorting()" class="custom-button">Reset</button>
      </div>
    </div>

    <script>
      let array = [];
      let isPaused = false;
      let speed = 500;
      let i = 0, j = 0;

      document.getElementById("speedControl").addEventListener("input", (event) => {
        speed = event.target.value;
      });

      function validateInput() {
        const inputField = document.getElementById("inputField");
        const input = inputField.value.trim();
        inputField.setCustomValidity("");

        if (!input) {
          inputField.setCustomValidity("Input should not be empty.");
          return false;
        }

        if (/,,|[^0-9,]/.test(input)) {
          inputField.setCustomValidity("Incorrect format. Use valid numbers separated by single commas.");
          return false;
        }

        const inputArray = input.split(",");
        if (inputArray.length < 1 || inputArray.length > 10) {
          inputField.setCustomValidity("Only 1-10 numbers are allowed.");
          return false;
        }

        return true;
      }

      function displayArray(selectedIndex = -1, minIndex = -1) {
        const visualization = document.getElementById("visualization");
        visualization.innerHTML = "";

        const maxValue = Math.max(...array);
        const containerHeight = 350;

        array.forEach((value, index) => {
          const bar = document.createElement("div");
          bar.className = "bar";

          const barHeight = (value / maxValue) * containerHeight;
          bar.style.height = `${barHeight}px`;
          bar.innerText = value;

          if (index === selectedIndex) bar.classList.add("selected");
          if (index === minIndex) bar.classList.add("min");
          visualization.appendChild(bar);
        });
      }

      function displayProcessStep(message) {
        const processContainer = document.getElementById("process");
        const step = document.createElement("div");
        step.className = "text-sm text-gray-700 mb-2";
        step.innerText = message;
        processContainer.appendChild(step);
        processContainer.scrollTop = processContainer.scrollHeight;
      }

      async function startSelectionSort() {
        const inputField = document.getElementById("inputField");

        if (!validateInput()) {
          inputField.reportValidity();
          return;
        }

        array = inputField.value.split(",").map(Number);
        document.getElementById("process").innerHTML = "";
        displayArray();
        displayProcessStep(`Starting array: [${array.join(", ")}]`);

        for (let i = 0; i < array.length - 1; i++) {
          if (isPaused) await pauseLoop();
          let minIndex = i;
          displayProcessStep(`Finding minimum from index ${i}`);

          for (let j = i + 1; j < array.length; j++) {
            if (isPaused) await pauseLoop();
            displayArray(i, minIndex);
            if (array[j] < array[minIndex]) {
              minIndex = j;
              displayProcessStep(`New minimum found: ${array[minIndex]} at index ${minIndex}`);
            }
            await sleep(speed);
          }

          if (minIndex !== i) {
            [array[i], array[minIndex]] = [array[minIndex], array[i]];
            displayProcessStep(`Swapped ${array[i]} with ${array[minIndex]}`);
            displayArray(i, minIndex);
            await sleep(speed);
          }
        }

        displayProcessStep(`Sorted Array: [${array.join(", ")}]`);
        displayArray();
      }

      function pauseSorting() {
        isPaused = !isPaused;
      }

      function resetSorting() {
        isPaused = false;
        array = [];
        document.getElementById("process").innerHTML = "";
        document.getElementById("visualization").innerHTML = "";
        document.getElementById("inputField").value = "";
      }

      function sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }

      async function pauseLoop() {
        while (isPaused) {
          await sleep(100);
        }
      }
    </script>
  </body>
</html>
