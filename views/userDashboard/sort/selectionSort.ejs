<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Enhanced Selection Sort Visualization</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />

    <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css"
    rel="stylesheet"
/>
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css"
    rel="stylesheet"
/>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>
    <style>
      .custom-button {
        background-color: #4b0082;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .custom-button:hover {
        background-color: #7b1fa2;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }

      .visualization-container {
        background-color: #f3f4f6;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 400px;
        height: 400px;
        overflow: hidden;
      }

      .bar {
        display: inline-block;
        width: 35px;
        margin: 4px;
        background: linear-gradient(to top, #ff8c00, #ffd700);
        color: white;
        text-align: center;
        font-weight: bold;
        border-radius: 5px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
      }
      .bar.selected {
        background: linear-gradient(to top, #32cd32, #228b22);
      }
      .bar.min {
        background: linear-gradient(to top, #ff6347, #ff4500);
      }

      .step-process-container {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 300px;
        height: 400px;
        overflow-y: auto;
      }

      .description-container {
        background-color: #ffffff; 
        color: #333333; 
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin-left: 330px;
        margin-right: 330px;
        margin-top: 20px;
      }

       pre {
        background-color: #f9f9f9; 
        color: #333333; 
        border: 1px solid #ddd; 
        border-radius: 5px;
        padding: 15px;
        overflow-x: auto; 
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-size: 0.9rem; 
      }

       .line-numbers-rows {
         border-right: 1px solid #e1e4e8;
      }

       .line-numbers .line-numbers-rows > span:before {
        color: #bbb; 
      }

      .slider {
        -webkit-appearance: none;
        width: 100px;
        height: 8px;
        background: #4b0082;
        outline: none;
        opacity: 0.8;
        transition: opacity 0.2s;
        border-radius: 5px;
      }
      .slider:hover {
        opacity: 1;
      }
    </style>
  </head>
  <body class="bg-gray-100 p-4">
    <a href="javascript:history.back()" class="custom-button inline-block"
      >Back</a
    >

    <div class="text-center mb-2">
      <h1 class="text-3xl font-bold text-purple-900">
        Enhanced Selection Sort Visualization
      </h1>
    </div>

    <div class="flex justify-center space-x-8 mb-6">
      <div
        class="visualization-container flex justify-center items-center relative"
      >
        <div
          id="visualization"
          class="w-full h-full flex items-end justify-center"
        ></div>
      </div>

      <div class="step-process-container">
        <h2 class="text-xl font-semibold mb-4 text-purple-800 text-center">
          Sorting Steps
        </h2>
        <div id="process" class="text-gray-700 text-sm"></div>
      </div>
    </div>

    <div class="flex justify-center items-center gap-2">
      <input
        id="inputField"
        type="text"
        placeholder="Enter numbers, e.g., 5,3,8,1,4"
        class="border border-gray-300 p-2 rounded w-64"
      />

      <div class="flex items-center space-x-4">
        <label for="speedControl" class="text-gray-700 font-semibold"
          >Speed:</label
        >
        <input
          type="range"
          id="speedControl"
          min="100"
          max="2000"
          value="500"
          class="slider"
        />
      </div>

      <div class="flex gap-2">
        <button onclick="startSelectionSort()" class="custom-button">
          Start
        </button>
        <button onclick="pauseSorting()" class="custom-button">Pause</button>
        <button onclick="resetSorting()" class="custom-button">Reset</button>
      </div>
    </div>

    <div class="description-container">
      <div class="flex justify-center items-center space-x-4 mb-4">
        <button onclick="toggleContainer('About')" class="custom-button">About</button>
        <button onclick="toggleContainer('Work')" class="custom-button">How does it work</button>
        <button onclick="toggleContainer('Learn')" class="custom-button">Learn More</button>
      </div>

      <!-- Containers now positioned separately -->
      <div id="About" class="hidden">
        <p>
            <b>Selection Sort</b> is a comparison-based sorting algorithm that sorts an array 
            by repeatedly selecting the smallest (or largest) element from the unsorted portion 
            and swapping it with the first unsorted element. This process continues until the 
            entire array is sorted.
        </p>
        <ul class="list-disc ml-6 mt-4 text-gray-700">
            <li>
                <b>Steps of Selection Sort:</b>
                <ul class="list-disc ml-6">
                    <li>
                        Start by finding the <b>smallest element</b> in the array and 
                        swap it with the <b>first element</b>. This ensures that the 
                        smallest element is in its correct position.
                    </li>
                    <li>
                        Then, find the <b>smallest element</b> among the remaining unsorted 
                        elements and swap it with the <b>second element</b>.
                    </li>
                    <li>
                        Repeat this process, selecting the smallest element from the unsorted 
                        portion and swapping it with the first unsorted element, until all 
                        elements are sorted.
                    </li>
                </ul>
            </li>
            <li>
                <b>Time Complexity:</b>
                <ul class="list-disc ml-6">
                    <li><b>Best case:</b> O(n²) – Selection Sort does not optimize for already sorted arrays.</li>
                    <li><b>Worst case:</b> O(n²) – Occurs when the array is in reverse order, as all comparisons still happen.</li>
                    <li><b>Average case:</b> O(n²).</li>
                </ul>
            </li>
            <li>
                <b>Space Complexity:</b> O(1) – as it is an in-place sorting algorithm requiring no extra memory.
            </li>
            <li>
                <b>Advantages:</b>
                <ul class="list-disc ml-6">
                    <li>Simple to understand and implement.</li>
                    <li>Does not require additional memory.</li>
                    <li>Performs a minimal number of swaps (at most n - 1 swaps).</li>
                </ul>
            </li>
            <li>
                <b>Disadvantages:</b>
                <ul class="list-disc ml-6">
                    <li>Relatively inefficient for large datasets due to O(n²) time complexity.</li>
                    <li>Not a <b>stable sorting algorithm</b>, as it does not preserve the relative order of equal elements.</li>
                    <li>Always makes the same number of comparisons, regardless of input order.</li>
                </ul>
            </li>
        </ul>
    </div>
    
    
    

      <div id="Work" class="hidden">
        <h2 class="text-lg font-bold">JavaScript Selection Sort</h2>
        <pre class="line-numbers"><code class="language-javascript">
          function selectionSort(arr) {
            let n = arr.length;
            for (let i = 0; i < n - 1; i++) {
            
                // Assume the current position holds
                // the minimum element
                let min_idx = i;
                
                // Iterate through the unsorted portion
                // to find the actual minimum
                for (let j = i + 1; j < n; j++) {
                    if (arr[j] < arr[min_idx]) {
                    
                        // Update min_idx if a smaller element is found
                        min_idx = j;
                    }
                }
                
                // Move minimum element to its
                // correct position
                let temp = arr[i];
                arr[i] = arr[min_idx];
                arr[min_idx] = temp;
            }
        }
        
        function printArray(arr) {
            for (let val of arr) {
                process.stdout.write(val + " ");
            }
            console.log();
        }
        
        // Driver function 
        const arr = [64, 25, 12, 22, 11];
        
        console.log("Original array: ");
        printArray(arr);
        
        selectionSort(arr);
        
        console.log("Sorted array: ");
        printArray(arr);
        
             
        </code></pre>
        <h2 class="text-lg font-bold">Python Selection Sort</h2>
        <pre class="line-numbers"><code class="language-python">
          # Python program for implementation of Selection
          # Sort
          
          def selection_sort(arr):
              n = len(arr)
              for i in range(n - 1):
                
                  # Assume the current position holds
                  # the minimum element
                  min_idx = i
                  
                  # Iterate through the unsorted portion
                  # to find the actual minimum
                  for j in range(i + 1, n):
                      if arr[j] < arr[min_idx]:
                        
                          # Update min_idx if a smaller element is found
                          min_idx = j
                  
                  # Move minimum element to its
                  # correct position
                  arr[i], arr[min_idx] = arr[min_idx], arr[i]
          
          def print_array(arr):
              for val in arr:
                  print(val, end=" ")
              print()
          
          if __name__ == "__main__":
              arr = [64, 25, 12, 22, 11]
              
              print("Original array: ", end="")
              print_array(arr)
              
              selection_sort(arr)
              
              print("Sorted array: ", end="")
              print_array(arr)
        </code></pre>
        <h2 class="text-lg font-bold">Java Selection Sort</h2>
        <pre class="line-numbers"><code class="language-java">

          // Java program for implementation of Selection Sort
          import java.util.Arrays;
          
          class GfG {
          
              static void selectionSort(int[] arr){
                  int n = arr.length;
                  for (int i = 0; i < n - 1; i++) {
                    
                      // Assume the current position holds
                      // the minimum element
                      int min_idx = i;
          
                      // Iterate through the unsorted portion
                      // to find the actual minimum
                      for (int j = i + 1; j < n; j++) {
                          if (arr[j] < arr[min_idx]) {
                            
                              // Update min_idx if a smaller element
                              // is found
                              min_idx = j;
                          }
                      }
          
                      // Move minimum element to its
                      // correct position
                      int temp = arr[i];
                      arr[i] = arr[min_idx];
                      arr[min_idx] = temp;           
                  }
              }
          
              static void printArray(int[] arr){
                  for (int val : arr) {
                      System.out.print(val + " ");
                  }
                  System.out.println();
              }
            
              public static void main(String[] args){
                  int[] arr = { 64, 25, 12, 22, 11 };
          
                  System.out.print("Original array: ");
                  printArray(arr);
          
                  selectionSort(arr);
          
                  System.out.print("Sorted array: ");
                  printArray(arr);
              }
          }
        </code></pre>
      </div>
    </div>
    </div>

    <script>
       function toggleContainer(containerId) {
        const containers = ['About', 'Work'];
        containers.forEach((id) => {
          const container = document.getElementById(id);
          if (id === containerId) {
            container.classList.toggle('hidden');
          } else {
            container.classList.add('hidden');
          }
        });
      }

      let array = [];
      let isPaused = false;
      let speed = 500;
      let i = 0, j = 0;

      document.getElementById("speedControl").addEventListener("input", (event) => {
        speed = event.target.value;
      });

      function validateInput() {
        const inputField = document.getElementById("inputField");
        const input = inputField.value.trim();
        inputField.setCustomValidity("");

        if (!input) {
          inputField.setCustomValidity("Input should not be empty.");
          return false;
        }

        if (/,,|[^0-9,]/.test(input)) {
          inputField.setCustomValidity("Incorrect format. Use valid numbers separated by single commas.");
          return false;
        }

        const inputArray = input.split(",");
        if (inputArray.length < 1 || inputArray.length > 10) {
          inputField.setCustomValidity("Only 1-10 numbers are allowed.");
          return false;
        }

        return true;
      }

      function displayArray(selectedIndex = -1, minIndex = -1) {
        const visualization = document.getElementById("visualization");
        visualization.innerHTML = "";

        const maxValue = Math.max(...array);
        const containerHeight = 350;

        array.forEach((value, index) => {
          const bar = document.createElement("div");
          bar.className = "bar";

          const barHeight = (value / maxValue) * containerHeight;
          bar.style.height = `${barHeight}px`;
          bar.innerText = value;

          if (index === selectedIndex) bar.classList.add("selected");
          if (index === minIndex) bar.classList.add("min");
          visualization.appendChild(bar);
        });
      }

      function displayProcessStep(message) {
        const processContainer = document.getElementById("process");
        const step = document.createElement("div");
        step.className = "text-sm text-gray-700 mb-2";
        step.innerText = message;
        processContainer.appendChild(step);
        processContainer.scrollTop = processContainer.scrollHeight;
      }

      async function startSelectionSort() {
        const inputField = document.getElementById("inputField");

        if (!validateInput()) {
          inputField.reportValidity();
          return;
        }

        array = inputField.value.split(",").map(Number);
        document.getElementById("process").innerHTML = "";
        displayArray();
        displayProcessStep(`Starting array: [${array.join(", ")}]`);

        for (let i = 0; i < array.length - 1; i++) {
          if (isPaused) await pauseLoop();
          let minIndex = i;
          displayProcessStep(`Finding minimum from index ${i}`);

          for (let j = i + 1; j < array.length; j++) {
            if (isPaused) await pauseLoop();
            displayArray(i, minIndex);
            if (array[j] < array[minIndex]) {
              minIndex = j;
              displayProcessStep(`New minimum found: ${array[minIndex]} at index ${minIndex}`);
            }
            await sleep(speed);
          }

          if (minIndex !== i) {
            [array[i], array[minIndex]] = [array[minIndex], array[i]];
            displayProcessStep(`Swapped ${array[i]} with ${array[minIndex]}`);
            displayArray(i, minIndex);
            await sleep(speed);
          }
        }

        displayProcessStep(`Sorted Array: [${array.join(", ")}]`);
        displayArray();
      }

      function pauseSorting() {
        isPaused = !isPaused;
      }

      function resetSorting() {
        isPaused = false;
        array = [];
        document.getElementById("process").innerHTML = "";
        document.getElementById("visualization").innerHTML = "";
        document.getElementById("inputField").value = "";
      }

      function sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }

      async function pauseLoop() {
        while (isPaused) {
          await sleep(100);
        }
      }
    </script>
  </body>
</html>
