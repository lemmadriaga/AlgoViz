<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Enhanced Insertion Sort Visualization</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
     <link
       href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css"
       rel="stylesheet"
/>
     <link
       href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css"
      rel="stylesheet"
/>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>

    
    <style>
         body {
        font-family: 'Inter', sans-serif;
      }
      .custom-button {
        background-color: #1E201E;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .custom-button:hover {
        background-color: #697565;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }

      .visualization-container {
        background-color: #f3f4f6;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 400px;
        height: 400px;
        overflow: hidden;
      }

      .step-process-container {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 300px;
        height: 400px;
      }

      .description-container {
        background-color: #ffffff; 
        color: #333333; 
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin-left: 270px;
        margin-right: 270px;
        margin-top: 20px;
    
      }

       pre {
        background-color: #f9f9f9; 
        color: #333333; 
        border: 1px solid #ddd; 
        border-radius: 5px;
        padding: 15px;
        overflow-x: auto; 
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-size: 0.9rem; 
      }

       .line-numbers-rows {
         border-right: 1px solid #e1e4e8;
      }

       .line-numbers .line-numbers-rows > span:before {
        color: #bbb; 
      }

      .bar {
        display: inline-block;
        width: 35px;
        margin: 4px;
        background: linear-gradient(to top, #ff8c00, #ffd700);
        color: white;
        text-align: center;
        font-weight: bold;
        border-radius: 5px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
      }

      .bar.selected {
        background: linear-gradient(to top, #32cd32, #228b22);
      }

      .slider {
        -webkit-appearance: none;
        width: 100px;
        height: 8px;
        background: #1E201E;
        outline: none;
        opacity: 0.8;
        transition: opacity 0.2s;
        border-radius: 5px;
      }
      .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 18px; 
        height: 18px; 
        background: #697565; 
        border-radius: 50%; 
        cursor: pointer; 
      }

      .slider:hover {
        opacity: 1;
      }

      @media (max-width: 768px) {
        .visualization-container {
          width: 100%;
          height: auto;
        }
    
        .step-process-container {
          width: 280px;
          height: auto;
        }
    
        .description-container {
          margin: 10px;
        }
    
        .description-container .flex {
          flex-direction: column;
          gap: 1rem;
          align-items: center;
        }
    
        .flex {
          flex-direction: column;
          gap: 1rem;
        }
    
        .custom-button {
          width: 100%;
          text-align: center;
        }
    
        input[type="text"],
        .slider {
          width: 100%;
        }
    
        iframe {
          width: 100%;
          height: auto;
        }
    
        pre {
          font-size: 0.8rem;
          padding: 10px;
        }
    
        .bar-container {
          flex-direction: row;
          gap: 4px;
        }
    
        .flex-container {
          flex-direction: column;
        }
    
        .visualization-container,
        .step-process-container {
          margin-bottom: 10px;
        }
    
        .button-group {
          width: 100%;
          flex-direction: row;
        }
    
        .bar {
          flex-direction: row;
          display: flex;
        }
      }
    </style>
  </head>
  <body class="bg-gray-100 p-4">
    <a href="javascript:history.back()" class="custom-button inline-block">Back</a>

    <div class="text-center mb-2">
      <h1 class="text-3xl font-bold text-[#1E201E]">
        Enhanced Insertion Sort Visualization
      </h1>
    </div>

    <div class="flex justify-center space-x-8 mb-6">
      <div class="visualization-container flex justify-center items-center relative">
        <div id="visualization" class="bar-container w-full h-full flex items-end justify-center"></div>
      </div>

      <div class="step-process-container overflow-y-auto">
        <h2 class="text-xl font-semibold mb-4 text-[#1E201E] text-center">
          Sorting Steps
        </h2>
        <div id="process" class="text-gray-700 text-sm"></div>
      </div>
    </div>

    <div class="flex justify-center items-center gap-4">
      <input
        id="inputField"
        type="text"
        placeholder="Enter numbers, e.g., 5,3,8,1,4"
        class="border border-gray-300 p-2 rounded w-64"
      />

      <div class="flex items-center space-x-4">
        <label for="speedControl" class="text-gray-700 font-semibold">Speed:</label>
        <input
          type="range"
          id="speedControl"
          min="100"
          max="2000"
          value="500"
          class="slider"
        />
      </div>

      <div class="button-group flex gap-2">
        <button onclick="startSorting()" class="custom-button">Start</button>
        <button onclick="pauseSorting()" class="custom-button">Pause</button>
        <button onclick="resetSorting()" class="custom-button">Reset</button>
      </div>
    </div>

    <div class="description-container">
      <div class="flex justify-center items-center space-x-4">
        <button onclick="toggleContainer('About')" class="custom-button">About</button>
        <button onclick="toggleContainer('Work')" class="custom-button">How does it work</button>
        <button onclick="toggleContainer('Learn')" class="custom-button">Learn More</button>
      </div>

      <div id="About" class="hidden">
        <p>
            <b>Insertion Sort</b> is a simple sorting algorithm that works by iteratively 
            inserting each element of an unsorted list into its correct position in a sorted 
            portion of the list. It is often compared to <b>sorting playing cards</b> in your hands. 
            You split the cards into two groups: the sorted cards and the unsorted cards. 
            Then, you pick a card from the unsorted group and put it in the right place in 
            the sorted group.
        </p>
        <ul class="list-disc ml-6 mt-4 text-gray-700">
            <li>
                We start with the <b>second element</b> of the array, as the first element 
                is assumed to be sorted.
            </li>
            <li>
                Compare the second element with the first element. If the second element 
                is smaller, <b>swap them</b>.
            </li>
            <li>
                Move to the third element and compare it with the first two elements. 
                Insert it into its correct position within the sorted group by shifting 
                larger elements to the right.
            </li>
            <li>
                Repeat this process for each subsequent element until the entire array is sorted.
            </li>
            <li>
                <b>Time Complexity:</b>
                <ul class="list-disc ml-6">
                    <li><b>Best case:</b> O(n) – occurs when the array is already sorted.</li>
                    <li><b>Worst case:</b> O(n²) – occurs when the array is sorted in reverse order.</li>
                    <li><b>Average case:</b> O(n²).</li>
                </ul>
            </li>
            <li>
                <b>Space Complexity:</b> O(1) – an in-place sorting algorithm that requires 
                no additional memory.
            </li>
            <li>
                <b>Advantages:</b>
                <ul class="list-disc ml-6">
                    <li>Simple to understand and implement.</li>
                    <li>Efficient for small or nearly sorted datasets.</li>
                    <li>A <b>stable sorting algorithm</b>, preserving the relative order 
                        of equal elements.
                    </li>
                </ul>
            </li>
            <li>
                <b>Disadvantages:</b>
                <ul class="list-disc ml-6">
                    <li>Slow for large datasets due to its O(n²) time complexity.</li>
                    <li>Not suitable for applications requiring high efficiency on large inputs.</li>
                </ul>
            </li>
        </ul>
    </div>
    
    

      <div id="Work" class="hidden">
        <h2 class="text-lg font-bold">JavaScript Insertion Sort</h2>
        <pre class="line-numbers"><code class="language-javascript">
          // Javascript program for insertion sort 

          // Function to sort array using insertion sort
          function insertionSort(arr) {
              for (let i = 1; i < arr.length; i++) {
                  let key = arr[i];
                  let j = i - 1;
          
                  /* Move elements of arr[0..i-1], that are
                     greater than key, to one position ahead
                     of their current position */
                  while (j >= 0 && arr[j] > key) {
                      arr[j + 1] = arr[j];
                      j = j - 1;
                  }
                  arr[j + 1] = key;
              }
          }
          
          // A utility function to print array of size n
          function printArray(arr) {
              console.log(arr.join(" "));
          }
          
          // Driver method
          let arr = [12, 11, 13, 5, 6];
          
          insertionSort(arr);
          printArray(arr);
        
          
        </code></pre>
        <h2 class="text-lg font-bold">Python Insertion Sort</h2>
        <pre class="line-numbers"><code class="language-python">
          # Python program for implementation of Insertion Sort

          # Function to sort array using insertion sort
          def insertionSort(arr):
              for i in range(1, len(arr)):
                  key = arr[i]
                  j = i - 1
          
                  # Move elements of arr[0..i-1], that are
                  # greater than key, to one position ahead
                  # of their current position
                  while j >= 0 and key < arr[j]:
                      arr[j + 1] = arr[j]
                      j -= 1
                  arr[j + 1] = key
          
          # A utility function to print array of size n
          def printArray(arr):
              for i in range(len(arr)):
                  print(arr[i], end=" ")
              print()
          
          # Driver method
          if __name__ == "__main__":
              arr = [12, 11, 13, 5, 6]
              insertionSort(arr)
              printArray(arr)
          
        </code></pre>
        <h2 class="text-lg font-bold">Java Insertion Sort</h2>
        <pre class="line-numbers"><code class="language-java">

          // Java program for implementation of Insertion Sort
          public class InsertionSort {
              /* Function to sort array using insertion sort */
              void sort(int arr[])
              {
                  int n = arr.length;
                  for (int i = 1; i < n; ++i) {
                      int key = arr[i];
                      int j = i - 1;
          
                      /* Move elements of arr[0..i-1], that are
                         greater than key, to one position ahead
                         of their current position */
                      while (j >= 0 && arr[j] > key) {
                          arr[j + 1] = arr[j];
                          j = j - 1;
                      }
                      arr[j + 1] = key;
                  }
              }
          
              /* A utility function to print array of size n */
              static void printArray(int arr[])
              {
                  int n = arr.length;
                  for (int i = 0; i < n; ++i)
                      System.out.print(arr[i] + " ");
          
                  System.out.println();
              }
          
              // Driver method
              public static void main(String args[])
              {
                  int arr[] = { 12, 11, 13, 5, 6 };
          
                  InsertionSort ob = new InsertionSort();
                  ob.sort(arr);
          
                  printArray(arr);
              }
          }
     
        </code></pre>
      </div>
      
   
      <div id="Learn" class="hidden">
        <h2 class="text-lg font-bold text-center">Learn More About Insertion Sort</h2>
        <div class="flex justify-center items-center">
          <iframe
          width="560"
          height="315"
          src="https://www.youtube.com/embed/JU767SDMDvA?si=I2f-9d3TzS_Gszn0"
          title="YouTube video player"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
          referrerpolicy="strict-origin-when-cross-origin"
          allowfullscreen>
        </iframe>        
        </div>
      </div>

    <script>
      function toggleContainer(containerId) {
        const containers = ['About', 'Work', 'Learn'];
        containers.forEach((id) => {
          const container = document.getElementById(id);
          if (id === containerId) {
            container.classList.toggle('hidden');
          } else {
            container.classList.add('hidden');
          }
        });
      }
      let array = [];
      let isPaused = false;
      let speed = 500;
      let intervalId;

      document
        .getElementById("speedControl")
        .addEventListener("input", (event) => {
          speed = event.target.value;
        });

      function validateInput() {
        const inputField = document.getElementById("inputField");
        const input = inputField.value.trim();

        inputField.setCustomValidity("");

        if (!input) {
          inputField.setCustomValidity("Input should not be empty.");
          return false;
        }

        if (/,,|[^0-9,]/.test(input)) {
          inputField.setCustomValidity("Incorrect format. Use valid numbers separated by single commas.");
          return false;
        }

        const inputArray = input.split(",");
        
        if (inputArray.some((value) => value === "")) {
          inputField.setCustomValidity("Incorrect format. Avoid empty elements or trailing commas.");
          return false;
        }

        if (inputArray.length < 1 || inputArray.length > 10) {
          inputField.setCustomValidity("Only 1-10 numbers are allowed.");
          return false;
        }

        if (inputArray.some((value) => parseInt(value, 10) < 0 || parseInt(value, 10) > 9)) {
          inputField.setCustomValidity("Only numbers between 0-9 are allowed.");
          return false;
        }

        return true;
      }

      function displayArray(currentIndex = -1) {
        const visualization = document.getElementById("visualization");
        visualization.innerHTML = "";

        const maxValue = Math.max(...array);
        const containerHeight = 400;

        array.forEach((value, index) => {
          const bar = document.createElement("div");
          bar.className = "bar";

          const barHeight = ((value / maxValue) * containerHeight) - 50;
          bar.style.height = `${barHeight}px`;
          bar.innerText = value;

          if (index === currentIndex) bar.classList.add("selected");

          visualization.appendChild(bar);
        });
      }

      function displayProcessStep(message) {
        const processContainer = document.getElementById("process");
        const step = document.createElement("div");
        step.className = "text-sm text-gray-700 mb-2";
        step.innerText = message;
        processContainer.appendChild(step);
        processContainer.scrollTop = processContainer.scrollHeight;
      }

      async function startSorting() {
        const inputField = document.getElementById("inputField");

        if (!validateInput()) {
          inputField.reportValidity();
          return;
        }

        array = inputField.value.split(",").map(Number);
        document.getElementById("process").innerHTML = "";
        displayArray();
        displayProcessStep(`Starting array: [${array.join(", ")}]`);

        for (let i = 1; i < array.length; i++) {
          if (isPaused) await pauseLoop();
          let key = array[i];
          let j = i - 1;

          displayProcessStep(`Inserting ${key}`);
          displayArray(i);

          while (j >= 0 && array[j] > key) {
            if (isPaused) await pauseLoop();
            array[j + 1] = array[j];
            j--;
            displayArray(j + 1);
            displayProcessStep(`Moved ${array[j + 1]} to position ${j + 2}`);
            await sleep(speed);
          }

          array[j + 1] = key;
          displayProcessStep(`Inserted ${key} at position ${j + 2}`);
          displayArray(i);
          await sleep(speed);
        }

        displayProcessStep(`Sorted Array: [${array.join(", ")}]`);
        displayArray();
      }

      function pauseSorting() {
        isPaused = !isPaused;
      }

      function sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }

      async function pauseLoop() {
        while (isPaused) {
          await sleep(100);
        }
      }

      function resetSorting() {
        clearInterval(intervalId);
        document.getElementById("visualization").innerHTML = "";
        document.getElementById("process").innerHTML = "";
        document.getElementById("inputField").value = "";
        isPaused = false;
      }
    </script>
  </body>
</html>
