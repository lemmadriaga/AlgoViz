<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Linear Search Visualization</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />

    <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css"
    rel="stylesheet"
/>
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css"
    rel="stylesheet"
/>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>

    <style>
      .custom-button {
        background-color: #4b0082;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .custom-button:hover {
        background-color: #7b1fa2;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }

      .visualization-container {
        background-color: #f3f4f6;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 400px;
        height: 400px;
        overflow: hidden;
      }

      .bar {
        display: inline-block;
        width: 30px;
        margin: 4px;
        background: linear-gradient(to top, #ff8c00, #ffd700);
        color: white;
        text-align: center;
        font-weight: bold;
        border-radius: 5px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
      }
      .bar.compare {
        background: linear-gradient(to top, #ff6347, #ff4500); /* Red when checking */
      }
      .bar.found {
        background: linear-gradient(to top, #32cd32, #228b22); /* Green when found */
      }

      .step-process-container {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 300px;
        height: 400px;
      }

      .description-container {
        background-color: #ffffff; 
        color: #333333; 
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin-left: 330px;
        margin-right: 330px;
        margin-top: 20px;
      }

       pre {
        background-color: #f9f9f9; 
        color: #333333; 
        border: 1px solid #ddd; 
        border-radius: 5px;
        padding: 15px;
        overflow-x: auto; 
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-size: 0.9rem; 
      }

       .line-numbers-rows {
         border-right: 1px solid #e1e4e8;
      }

       .line-numbers .line-numbers-rows > span:before {
        color: #bbb; 
      }

      .slider {
        -webkit-appearance: none;
        width: 100px;
        height: 8px;
        background: #4b0082;
        outline: none;
        opacity: 0.8;
        transition: opacity 0.2s;
        border-radius: 5px;
      }
      .slider:hover {
        opacity: 1;
      }
    </style>
  </head>
  <body class="bg-gray-100 p-8">
    <a href="javascript:history.back()" class="custom-button mb-4 inline-block">Back</a>

    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold text-purple-900">
        Linear Search Visualization
      </h1>
    </div>

    <div class="flex justify-center space-x-8 mb-8">
      <div class="visualization-container flex justify-center items-center relative">
        <div id="visualization" class="w-full h-full flex items-end justify-center"></div>
      </div>

      <div class="step-process-container w-1/3 h-96 overflow-y-auto">
        <h2 class="text-xl font-semibold mb-4 text-purple-800 text-center">Search Steps</h2>
        <div id="process" class="text-gray-700 text-sm"></div>
      </div>
    </div>
    <div class="flex justify-center items-center gap-2">
      <input
        id="inputField"
        type="text"
        placeholder="Enter numbers, e.g., 5,3,8,1,4"
        class="border border-gray-300 p-2 rounded w-64"
      />
    
      <input
        id="targetInput"
        type="text"
        placeholder="Enter target element"
        class="border border-gray-300 p-2 rounded w-64"
      />
    
      <div class="flex items-center space-x-4">
        <label for="speedControl" class="text-gray-700 font-semibold">Speed:</label>
        <input
          type="range"
          id="speedControl"
          min="100"
          max="2000"
          value="500"
          class="slider"
        />
      </div>
    
      <div class="flex gap-2">
        <button onclick="startSearching()" class="custom-button">Start</button>
        <button onclick="pauseSearching()" class="custom-button">Pause</button>
        <button onclick="resetSearching()" class="custom-button">Reset</button>
      </div>
    </div>


    <div class="description-container">
      <div class="flex justify-center items-center space-x-4 mb-4">
        <button onclick="toggleContainer('About')" class="custom-button">About</button>
        <button onclick="toggleContainer('Work')" class="custom-button">How does it work</button>
        <button onclick="toggleContainer('Learn')" class="custom-button">Learn More</button>
      </div>

      <div id="About" class="hidden">
        <p>
            <b>Linear Search</b> is a simple search algorithm that works by checking each 
            element in the array sequentially from the start to the end. It compares the 
            target element (key) with every element in the list until a match is found or 
            the entire list has been checked. It is ideal for small datasets or when the 
            data is unsorted.
        </p>
        <ul class="list-disc ml-6 mt-4 text-gray-700">
            <li>
                <b>Steps of Linear Search:</b>
                <ul class="list-disc ml-6">
                    <li>Start at the <b>first element</b> of the array.</li>
                    <li>Compare the current element with the <b>target element</b> (key).</li>
                    <li>If the current element matches the key, the search is <b>terminated</b> and the index of the element is returned.</li>
                    <li>If the current element does not match the key, move to the <b>next element</b> in the array.</li>
                    <li>Repeat the process until either the key is found or the entire array has been searched.</li>
                </ul>
            </li>
            <li>
                <b>Time Complexity:</b>
                <ul class="list-disc ml-6">
                    <li><b>Best case:</b> O(1) – occurs if the target element is the first element in the array.</li>
                    <li><b>Worst case:</b> O(n) – occurs if the target element is the last element or not present at all.</li>
                    <li><b>Average case:</b> O(n) – on average, half of the elements will need to be checked.</li>
                </ul>
            </li>
            <li>
                <b>Space Complexity:</b> O(1) – Linear Search uses constant space as it does not require additional memory beyond variables to store the index and the key.
            </li>
            <li>
                <b>Advantages:</b>
                <ul class="list-disc ml-6">
                    <li>Simple to understand and implement.</li>
                    <li>Works on unsorted data, unlike Binary Search.</li>
                    <li>No need for additional memory allocation as it is an in-place search algorithm.</li>
                </ul>
            </li>
            <li>
                <b>Disadvantages:</b>
                <ul class="list-disc ml-6">
                    <li>Relatively inefficient for large datasets with O(n) time complexity.</li>
                    <li>Does not benefit from any optimizations like Binary Search, as it checks each element individually.</li>
                </ul>
            </li>
        </ul>
    </div>
    
    
    

      <div id="Work" class="hidden">
        <h2 class="text-lg font-bold">JavaScript Linear Search</h2>
        <pre class="line-numbers"><code class="language-javascript">
          // Javascript code to linearly search x in arr[].

          function search(arr, n, x)
          {
              for (let i = 0; i < n; i++)
                  if (arr[i] == x)
                      return i;
              return -1;
          }
          
          // Driver code
          
              let arr = [ 2, 3, 4, 10, 40 ];
              let x = 10;
              let n = arr.length;
          
              // Function call
              let result = search(arr, n, x);
              (result == -1)
                  ? console.log("Element is not present in array")
                  : console.log("Element is present at index " + result);
          
             
        </code></pre>
        <h2 class="text-lg font-bold">Python Linear Search</h2>
        <pre class="line-numbers"><code class="language-python">
          # Python3 code to linearly search x in arr[].


          def search(arr, N, x):
          
              for i in range(0, N):
                  if (arr[i] == x):
                      return i
              return -1
          
          
          # Driver Code
          if __name__ == "__main__":
              arr = [2, 3, 4, 10, 40]
              x = 10
              N = len(arr)
          
              # Function call
              result = search(arr, N, x)
              if(result == -1):
                  print("Element is not present in array")
              else:
                  print("Element is present at index", result)
        </code></pre>
        <h2 class="text-lg font-bold">Java Linear Search</h2>
        <pre class="line-numbers"><code class="language-java">

          // Java code for linearly searching x in arr[]. 

          import java.io.*;
          
          class GFG {
              public static int search(int arr[], int N, int x)
              {
                  for (int i = 0; i < N; i++) {
                      if (arr[i] == x)
                          return i;
                  }
                  return -1;
              }
          
              // Driver code
              public static void main(String args[])
              {
                  int arr[] = { 2, 3, 4, 10, 40 };
                  int x = 10;
          
                  // Function call
                  int result = search(arr, arr.length, x);
                  if (result == -1)
                      System.out.print(
                          "Element is not present in array");
                  else
                      System.out.print("Element is present at index "
                                       + result);
              }
          }
        </code></pre>
      </div>

    <div id="Learn" class="hidden">
        <h2 class="text-lg font-bold text-center">Learn More About Linear Search</h2>
        <div class="flex justify-center items-center">
          <iframe
          width="560"
          height="315"
          src="https://www.youtube.com/embed/246V51AWwZM?si=aiT_tWJ3DOteNxV0"
          title="YouTube video player"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
          referrerpolicy="strict-origin-when-cross-origin"
          allowfullscreen>
        </iframe>              
      </div>
    

    <script>
        function toggleContainer(containerId) {
        const containers = ['About', 'Work', 'Learn'];
        containers.forEach((id) => {
          const container = document.getElementById(id);
          if (id === containerId) {
            container.classList.toggle('hidden');
          } else {
            container.classList.add('hidden');
          }
        });
      }

      let array = [];
      let target = null;
      let intervalId;
      let i = 0;
      let isPaused = false;
      let speed = 500;

      document
        .getElementById("speedControl")
        .addEventListener("input", (event) => {
          speed = event.target.value;
          if (intervalId) {
            clearInterval(intervalId);
            intervalId = setInterval(linearSearchStep, speed);
          }
        });

        function displayArray() {
  const visualization = document.getElementById("visualization");
  visualization.innerHTML = "";

  const maxValue = Math.max(...array);
  const containerHeight = 400;

  array.forEach((value, index) => {
    const bar = document.createElement("div");
    bar.className = "bar";


    const barHeight = ((value / maxValue) * containerHeight) - 50;
    bar.style.height = `${barHeight}px`;
    bar.innerText = value;

    if (index === i) bar.classList.add("compare");
    if (value === target && index === i) bar.classList.add("found");

    visualization.appendChild(bar);
  });
}


      function displayProcessStep(message) {
        const processContainer = document.getElementById("process");
        const step = document.createElement("div");
        step.className = "text-sm text-gray-700 mb-2";
        step.innerText = message;
        processContainer.appendChild(step);
        processContainer.scrollTop = processContainer.scrollHeight;
      }

      function startSearching() {
        const input = document.getElementById("inputField").value;
        const targetInput = document.getElementById("targetInput").value;

        array = input.split(",").map(Number);
        target = Number(targetInput);
        i = 0;
        isPaused = false;
        document.getElementById("process").innerHTML = "";
        displayArray();
        displayProcessStep(`Starting search for: ${target} in [${array.join(", ")}]`);
        intervalId = setInterval(linearSearchStep, speed);
      }

      function linearSearchStep() {
        if (isPaused) return;

        if (i < array.length) {
          displayArray();
          if (array[i] === target) {
            displayProcessStep(`Found ${target} at index ${i}!`);
            clearInterval(intervalId);
            displayArray();
          } else {
            displayProcessStep(`Checking index ${i}: ${array[i]}...`);
            i++;
          }
        } else {
          displayProcessStep(`Target ${target} not found.`);
          clearInterval(intervalId);
        }
      }

      function pauseSearching() {
        isPaused = !isPaused;
      }

      function resetSearching() {
        clearInterval(intervalId);
        document.getElementById("visualization").innerHTML = "";
        document.getElementById("process").innerHTML = "";
        document.getElementById("inputField").value = "";
        document.getElementById("targetInput").value = "";
        array = [];
        target = null;
        i = 0;
        isPaused = false;
      }
    </script>
  </body>
</html>