<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Binary Search Visualization</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />

    <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css"
    rel="stylesheet"
/>
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css"
    rel="stylesheet"
/>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>

    <style>
      .custom-button {
        background-color: #4b0082;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .custom-button:hover {
        background-color: #7b1fa2;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }

      .visualization-container {
        background-color: #f3f4f6;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 400px;
        height: 400px;
        overflow: hidden;
      }

      .bar {
        display: inline-block;
        width: 30px;
        margin: 4px;
        background: linear-gradient(to top, #ff8c00, #ffd700);
        color: white;
        text-align: center;
        font-weight: bold;
        border-radius: 5px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
      }
      .bar.compare {
        background: linear-gradient(to top, #ff6347, #ff4500); /* Red when checking */
      }
      .bar.found {
        background: linear-gradient(to top, #32cd32, #228b22); /* Green when found */
      }

      .step-process-container {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 300px;
        height: 400px;
      }

      .description-container {
        background-color: #ffffff; 
        color: #333333; 
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin-left: 330px;
        margin-right: 330px;
        margin-top: 20px;
      }

       pre {
        background-color: #f9f9f9; 
        color: #333333; 
        border: 1px solid #ddd; 
        border-radius: 5px;
        padding: 15px;
        overflow-x: auto; 
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-size: 0.9rem; 
      }

       .line-numbers-rows {
         border-right: 1px solid #e1e4e8;
      }

       .line-numbers .line-numbers-rows > span:before {
        color: #bbb; 
      }

      .slider {
        -webkit-appearance: none;
        width: 100px;
        height: 8px;
        background: #4b0082;
        outline: none;
        opacity: 0.8;
        transition: opacity 0.2s;
        border-radius: 5px;
      }
      .slider:hover {
        opacity: 1;
      }

      .error-message {
        color: red;
        font-weight: bold;
        margin-top: 1rem;
        text-align: center;
      }
    </style>
  </head>
  <body class="bg-gray-100 p-8">
    <a href="javascript:history.back()" class="custom-button mb-4 inline-block">Back</a>

    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold text-purple-900">Binary Search Visualization</h1>
    </div>

    <div class="flex justify-center space-x-8 mb-8">
      <div class="visualization-container flex justify-center items-center relative">
        <div id="visualization" class="w-full h-full flex items-end justify-center"></div>
      </div>

      <div class="step-process-container w-1/3 h-96 overflow-y-auto">
        <h2 class="text-xl font-semibold mb-4 text-purple-800 text-center">Search Steps</h2>
        <div id="process" class="text-gray-700 text-sm"></div>
      </div>
    </div>

    <div class="flex justify-center items-center gap-2">
      <input
        id="inputField"
        type="text"
        placeholder="Enter sorted numbers, e.g., 1,3,5,7,9"
        class="border border-gray-300 p-2 rounded w-64"
      />

      <input
        id="targetInput"
        type="text"
        placeholder="Enter target element"
        class="border border-gray-300 p-2 rounded w-64"
      />

      <div class="flex items-center space-x-4">
        <label for="speedControl" class="text-gray-700 font-semibold">Speed:</label>
        <input
          type="range"
          id="speedControl"
          min="100"
          max="2000"
          value="500"
          class="slider"
        />
      </div>

      <div class="flex gap-2">
        <button onclick="startSearching()" class="custom-button">Start</button>
        <button onclick="pauseSearching()" class="custom-button">Pause</button>
        <button onclick="resetSearching()" class="custom-button">Reset</button>
      </div>

      <div id="errorMessage" class="error-message"></div>
    </div>

    <div class="description-container">
      <div class="flex justify-center items-center space-x-4 mb-4">
        <button onclick="toggleContainer('About')" class="custom-button">About</button>
        <button onclick="toggleContainer('Work')" class="custom-button">How does it work</button>
        <button onclick="toggleContainer('Learn')" class="custom-button">Learn More</button>
      </div>

    
      <div id="About" class="hidden">
        <p>
            <b>Binary Search</b> is an efficient search algorithm that works on sorted arrays 
            or lists. It repeatedly divides the search space in half, narrowing down the possible 
            positions of the target element (key). Binary search significantly reduces the search 
            time compared to linear search, making it a faster option for large datasets.
        </p>
        <ul class="list-disc ml-6 mt-4 text-gray-700">
            <li>
                <b>Steps of Binary Search:</b>
                <ul class="list-disc ml-6">
                    <li>
                        Divide the search space into two halves by finding the middle index <b>mid</b>.
                    </li>
                    <li>
                        Compare the middle element with the key:
                        <ul class="list-disc ml-6">
                            <li>If the key is found at the middle element, the process is <b>terminated</b>.</li>
                            <li>If the key is not found at the middle element, proceed to the next step.</li>
                        </ul>
                    </li>
                    <li>
                        Choose the half that will be used as the next search space:
                        <ul class="list-disc ml-6">
                            <li>If the key is smaller than the middle element, the <b>left half</b> is selected for the next search.</li>
                            <li>If the key is larger than the middle element, the <b>right half</b> is selected for the next search.</li>
                        </ul>
                    </li>
                    <li>
                        Repeat the process until the key is found or the entire search space is exhausted.
                    </li>
                </ul>
            </li>
            <li>
                <b>Time Complexity:</b>
                <ul class="list-disc ml-6">
                    <li><b>Best case:</b> O(1) – occurs if the key is found at the middle of the array during the first comparison.</li>
                    <li><b>Worst case:</b> O(log n) – as the search space is halved each time, resulting in logarithmic time complexity.</li>
                    <li><b>Average case:</b> O(log n) – the search space will be reduced logarithmically in most cases.</li>
                </ul>
            </li>
            <li>
                <b>Space Complexity:</b> O(1) – Binary Search uses constant space as it only requires variables to store indices and the middle element.
            </li>
            <li>
                <b>Advantages:</b>
                <ul class="list-disc ml-6">
                    <li>Faster than linear search for large datasets with O(log n) time complexity.</li>
                    <li>Efficient for searching in sorted arrays or lists.</li>
                    <li>Requires minimal memory, making it space-efficient.</li>
                </ul>
            </li>
            <li>
                <b>Disadvantages:</b>
                <ul class="list-disc ml-6">
                    <li>Requires the array to be sorted before searching.</li>
                    <li>Not suitable for unsorted data, unlike linear search.</li>
                </ul>
            </li>
        </ul>
    </div>
    
    
    

      <div id="Work" class="hidden">
        <h2 class="text-lg font-bold">JavaScript Binary Search</h2>
        <pre class="line-numbers"><code class="language-javascript">
          // Program to implement iterative Binary Search

          // A iterative binary search function. It returns
          // location of x in given array arr[l..r] is present,
          // otherwise -1
          
          function binarySearch(arr, x)
          {
              let low = 0;
              let high = arr.length - 1;
              let mid;
              while (high >= low) {
                  mid = low + Math.floor((high - low) / 2);
          
                  // If the element is present at the middle
                  // itself
                  if (arr[mid] == x)
                      return mid;
          
                  // If element is smaller than mid, then
                  // it can only be present in left subarray
                  if (arr[mid] > x)
                      high = mid - 1;
          
                  // Else the element can only be present
                  // in right subarray
                  else
                      low = mid + 1;
              }
          
              // We reach here when element is not
              // present in array
              return -1;
          }
          
          arr = new Array(2, 3, 4, 10, 40);
          x = 10;
          n = arr.length;
          result = binarySearch(arr, x);
          if (result == -1)
              console.log("Element is not present in array")
              else
              {
                  console.log("Element is present at index "
                              + result);
              }
          
             
        </code></pre>
        <h2 class="text-lg font-bold">Python Binary Search</h2>
        <pre class="line-numbers"><code class="language-python">
          # Python3 code to implement iterative Binary
          # Search.
          
          
          # It returns location of x in given array arr
          def binarySearch(arr, low, high, x):
          
              while low <= high:
          
                  mid = low + (high - low) // 2
          
                  # Check if x is present at mid
                  if arr[mid] == x:
                      return mid
          
                  # If x is greater, ignore left half
                  elif arr[mid] < x:
                      low = mid + 1
          
                  # If x is smaller, ignore right half
                  else:
                      high = mid - 1
          
              # If we reach here, then the element
              # was not present
              return -1
          
          
          # Driver Code
          if __name__ == '__main__':
              arr = [2, 3, 4, 10, 40]
              x = 10
          
              # Function call
              result = binarySearch(arr, 0, len(arr)-1, x)
              if result != -1:
                  print("Element is present at index", result)
              else:
                  print("Element is not present in array")
        </code></pre>
        <h2 class="text-lg font-bold">Java Binary Search</h2>
        <pre class="line-numbers"><code class="language-java">

          // Java implementation of iterative Binary Search

          import java.io.*;
          
          class BinarySearch {
            
              // Returns index of x if it is present in arr[].
              int binarySearch(int arr[], int x)
              {
                  int low = 0, high = arr.length - 1;
                  while (low <= high) {
                      int mid = low + (high - low) / 2;
          
                      // Check if x is present at mid
                      if (arr[mid] == x)
                          return mid;
          
                      // If x greater, ignore left half
                      if (arr[mid] < x)
                          low = mid + 1;
          
                      // If x is smaller, ignore right half
                      else
                          high = mid - 1;
                  }
          
                  // If we reach here, then element was
                  // not present
                  return -1;
              }
          
              // Driver code
              public static void main(String args[])
              {
                  BinarySearch ob = new BinarySearch();
                  int arr[] = { 2, 3, 4, 10, 40 };
                  int n = arr.length;
                  int x = 10;
                  int result = ob.binarySearch(arr, x);
                  if (result == -1)
                      System.out.println(
                          "Element is not present in array");
                  else
                      System.out.println("Element is present at "
                                         + "index " + result);
              }
          }
        </code></pre>
      </div>

       <div id="Learn" class="hidden">
        <h2 class="text-lg font-bold text-center">Learn More About Binary Search</h2>
        <div class="flex justify-center items-center">
          <iframe
          width="560"
          height="315"
          src="https://www.youtube.com/embed/xrMppTpoqdw?si=rZTNpO9c3wbjf4ZY"
          title="YouTube video player"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
          referrerpolicy="strict-origin-when-cross-origin"
          allowfullscreen>
        </iframe>             
      </div>

    <script>
       function toggleContainer(containerId) {
        const containers = ['About', 'Work', 'Learn'];
        containers.forEach((id) => {
          const container = document.getElementById(id);
          if (id === containerId) {
            container.classList.toggle('hidden');
          } else {
            container.classList.add('hidden');
          }
        });
      }
      let array = [];
      let target = null;
      let left = 0;
      let right = 0;
      let mid = 0;
      let intervalId;
      let isPaused = false;
      let speed = 500;

      document
        .getElementById("speedControl")
        .addEventListener("input", (event) => {
          speed = event.target.value;
          if (intervalId) {
            clearInterval(intervalId);
            intervalId = setInterval(binarySearchStep, speed);
          }
        });
        function displayArray() {
  const visualization = document.getElementById("visualization");
  visualization.innerHTML = "";

  const maxValue = Math.max(...array);
  const containerHeight = 400;  

  for (let i = left; i <= right; i++) {
    const bar = document.createElement("div");
    bar.className = "bar";
    

    const barHeight = ((array[i] / maxValue) * containerHeight) - 50;
    bar.style.height = `${barHeight}px`;
    bar.innerText = array[i];

    if (i === mid) bar.classList.add("compare");
    if (array[i] === target && i === mid) bar.classList.add("found");

    visualization.appendChild(bar);
  }
}


      function displayProcessStep(message) {
        const processContainer = document.getElementById("process");
        const step = document.createElement("div");
        step.className = "text-sm text-gray-700 mb-2";
        step.innerText = message;
        processContainer.appendChild(step);
        processContainer.scrollTop = processContainer.scrollHeight;
      }

      function isArraySorted(arr) {
        for (let i = 1; i < arr.length; i++) {
          if (arr[i] < arr[i - 1]) return false;
        }
        return true;
      }

      function startSearching() {
        const input = document.getElementById("inputField").value;
        const targetInput = document.getElementById("targetInput").value;

        array = input.split(",").map(Number);
        target = Number(targetInput);

        if (!isArraySorted(array)) {
          document.getElementById("errorMessage").innerText = "Error: The array must be sorted in ascending order!";
          return;
        } else {
          document.getElementById("errorMessage").innerText = "";
        }

        left = 0;
        right = array.length - 1;
        mid = Math.floor((left + right) / 2);
        isPaused = false;
        document.getElementById("process").innerHTML = "";
        displayArray();
        displayProcessStep(`Starting search for: ${target} in [${array.join(", ")}]`);
        intervalId = setInterval(binarySearchStep, speed);
      }

      function binarySearchStep() {
        if (isPaused) return;

        if (left <= right) {
          mid = Math.floor((left + right) / 2);
          displayArray();

          if (array[mid] === target) {
            displayProcessStep(`Found ${target} at index ${mid}!`);
            clearInterval(intervalId);
            displayArray();
          } else if (array[mid] < target) {
            displayProcessStep(`Searching right: ${array[mid]} < ${target}`);
            left = mid + 1;
          } else {
            displayProcessStep(`Searching left: ${array[mid]} > ${target}`);
            right = mid - 1;
          }
        } else {
          displayProcessStep(`Target ${target} not found.`);
          clearInterval(intervalId);
        }
      }

      function pauseSearching() {
        isPaused = !isPaused;
      }

      function resetSearching() {
        clearInterval(intervalId);
        document.getElementById("visualization").innerHTML = "";
        document.getElementById("process").innerHTML = "";
        document.getElementById("inputField").value = "";
        document.getElementById("targetInput").value = "";
        document.getElementById("errorMessage").innerText = "";
        array = [];
        left = 0;
        right = 0;
        mid = 0;
        isPaused = false;
      }
    </script>
  </body>
</html>