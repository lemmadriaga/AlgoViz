<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Two Pointer Technique - Two Sum Visualization</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <style>
      .custom-button {
        background-color: #4b0082;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .custom-button:hover {
        background-color: #7b1fa2;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }

      .visualization-container {
        background-color: #f3f4f6;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 90%;
        height: 600px;
        overflow: hidden;
      }

      .bar {
        display: inline-block;
        width: 30px;
        margin: 4px;
        background: linear-gradient(to top, #ff8c00, #ffd700);
        color: white;
        text-align: center;
        font-weight: bold;
        border-radius: 5px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
      }
      .bar.compare {
        background: linear-gradient(to top, #ff6347, #ff4500); /* Red when checking */
      }
      .bar.found {
        background: linear-gradient(to top, #32cd32, #228b22); /* Green when found */
      }

      .step-process-container {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
      }

      .slider {
        -webkit-appearance: none;
        width: 100px;
        height: 8px;
        background: #4b0082;
        outline: none;
        opacity: 0.8;
        transition: opacity 0.2s;
        border-radius: 5px;
      }
      .slider:hover {
        opacity: 1;
      }

      .error-message {
        color: red;
        font-weight: bold;
        margin-top: 1rem;
        text-align: center;
      }
    </style>
  </head>
  <body class="bg-gray-100 p-8">
    <a href="javascript:history.back()" class="custom-button mb-4 inline-block">Back</a>

    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold text-purple-900">Two Pointer Technique - Two Sum</h1>
    </div>

    <div class="flex justify-center space-x-8 mb-8">
      <div class="visualization-container flex justify-center items-center relative">
        <div id="visualization" class="w-full h-full flex items-end justify-center"></div>
      </div>

      <div class="step-process-container w-1/3 h-96 overflow-y-auto">
        <h2 class="text-xl font-semibold mb-4 text-purple-800 text-center">Search Steps</h2>
        <div id="process" class="text-gray-700 text-sm"></div>
      </div>
    </div>

    <div class="flex flex-col items-center space-y-4">
      <input
        id="inputField"
        type="text"
        placeholder="Enter sorted numbers, e.g., 1,3,5,7,9"
        class="border border-gray-300 p-2 rounded w-64 mb-4"
      />

      <input
        id="targetInput"
        type="text"
        placeholder="Enter target sum"
        class="border border-gray-300 p-2 rounded w-64 mb-4"
      />

      <div class="flex items-center space-x-4">
        <label for="speedControl" class="text-gray-700 font-semibold">Speed:</label>
        <input
          type="range"
          id="speedControl"
          min="100"
          max="2000"
          value="500"
          class="slider"
        />
      </div>

      <div class="flex space-x-4 mt-4">
        <button onclick="startSearching()" class="custom-button">Start</button>
        <button onclick="pauseSearching()" class="custom-button">Pause</button>
        <button onclick="resetSearching()" class="custom-button">Reset</button>
      </div>

      <div id="errorMessage" class="error-message"></div>
    </div>

    <script>
      let array = [];
      let target = null;
      let left = 0;
      let right = 0;
      let intervalId;
      let isPaused = false;
      let speed = 500;

      document
        .getElementById("speedControl")
        .addEventListener("input", (event) => {
          speed = event.target.value;
          if (intervalId) {
            clearInterval(intervalId);
            intervalId = setInterval(twoSumStep, speed);
          }
        });

      function displayArray() {
        const visualization = document.getElementById("visualization");
        visualization.innerHTML = "";

        array.forEach((value, index) => {
          const bar = document.createElement("div");
          bar.className = "bar";
          bar.style.height = `${(value / Math.max(...array)) * 550}px`;
          bar.innerText = value;

          if (index === left || index === right) {
            bar.classList.add("compare");
          }

          if (array[left] + array[right] === target) {
            bar.classList.add("found");
          }

          visualization.appendChild(bar);
        });
      }

      function displayProcessStep(message) {
        const processContainer = document.getElementById("process");
        const step = document.createElement("div");
        step.className = "text-sm text-gray-700 mb-2";
        step.innerText = message;
        processContainer.appendChild(step);
        processContainer.scrollTop = processContainer.scrollHeight;
      }

      function isArraySorted(arr) {
        for (let i = 1; i < arr.length; i++) {
          if (arr[i] < arr[i - 1]) return false;
        }
        return true;
      }

      function startSearching() {
        const input = document.getElementById("inputField").value;
        const targetInput = document.getElementById("targetInput").value;

        array = input.split(",").map(Number);
        target = Number(targetInput);

        if (!isArraySorted(array)) {
          document.getElementById("errorMessage").innerText = "Error: The array must be sorted in ascending order!";
          return;
        } else {
          document.getElementById("errorMessage").innerText = "";
        }

        left = 0;
        right = array.length - 1;
        isPaused = false;
        document.getElementById("process").innerHTML = "";
        displayArray();
        displayProcessStep(`Starting search for two numbers that sum to ${target} in [${array.join(", ")}]`);
        intervalId = setInterval(twoSumStep, speed);
      }

      function twoSumStep() {
        if (isPaused) return;

        if (left < right) {
          displayArray();

          const currentSum = array[left] + array[right];
          if (currentSum === target) {
            displayProcessStep(`Found two numbers: ${array[left]} + ${array[right]} = ${target}`);
            clearInterval(intervalId);
            displayArray();
          } else if (currentSum < target) {
            displayProcessStep(`Sum of ${array[left]} + ${array[right]} = ${currentSum} is less than ${target}. Moving left pointer.`);
            left++;
          } else {
            displayProcessStep(`Sum of ${array[left]} + ${array[right]} = ${currentSum} is greater than ${target}. Moving right pointer.`);
            right--;
          }
        } else {
          displayProcessStep("No pair found that sums to the target.");
          clearInterval(intervalId);
        }
      }

      function pauseSearching() {
        isPaused = !isPaused;
      }

      function resetSearching() {
        clearInterval(intervalId);
        document.getElementById("visualization").innerHTML = "";
        document.getElementById("process").innerHTML = "";
        document.getElementById("inputField").value = "";
        document.getElementById("targetInput").value = "";
        document.getElementById("errorMessage").innerText = "";
        array = [];
        left = 0;
        right = 0;
        isPaused = false;
      }
    </script>
  </body>
</html>