<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Two Pointer Technique - Two Sum Visualization</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />

    <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css"
    rel="stylesheet"
/>
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css"
    rel="stylesheet"
/>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>

    <style>
      .custom-button {
        background-color: #4b0082;
        color: white;
        padding: 0.5rem 1.5rem;
        font-weight: bold;
        border-radius: 5px;
        transition: all 0.3s;
      }
      .custom-button:hover {
        background-color: #7b1fa2;
        transform: translateY(-2px);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
      }

      .visualization-container {
        background-color: #f3f4f6;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 400px;
        height: 400px;
        overflow: hidden;
      }

      .bar {
        display: inline-block;
        width: 30px;
        margin: 4px;
        background: linear-gradient(to top, #ff8c00, #ffd700);
        color: white;
        text-align: center;
        font-weight: bold;
        border-radius: 5px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
      }
      .bar.compare {
        background: linear-gradient(to top, #ff6347, #ff4500); /* Red when checking */
      }
      .bar.found {
        background: linear-gradient(to top, #32cd32, #228b22); /* Green when found */
      }

      .step-process-container {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        width: 300px;
        height: 400px;
      }

      .description-container {
        background-color: #ffffff; 
        color: #333333; 
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin-left: 330px;
        margin-right: 330px;
        margin-top: 20px;
      }

       pre {
        background-color: #f9f9f9; 
        color: #333333; 
        border: 1px solid #ddd; 
        border-radius: 5px;
        padding: 15px;
        overflow-x: auto; 
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-size: 0.9rem; 
      }

       .line-numbers-rows {
         border-right: 1px solid #e1e4e8;
      }

       .line-numbers .line-numbers-rows > span:before {
        color: #bbb; 
      }

      .slider {
        -webkit-appearance: none;
        width: 100px;
        height: 8px;
        background: #4b0082;
        outline: none;
        opacity: 0.8;
        transition: opacity 0.2s;
        border-radius: 5px;
      }
      .slider:hover {
        opacity: 1;
      }

      .error-message {
        color: red;
        font-weight: bold;
        margin-top: 1rem;
        text-align: center;
      }
    </style>
  </head>
  <body class="bg-gray-100 p-8">
    <a href="javascript:history.back()" class="custom-button mb-4 inline-block">Back</a>

    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold text-purple-900">Two Pointer Technique - Two Sum</h1>
    </div>

    <div class="flex justify-center space-x-8 mb-8">
      <div class="visualization-container flex justify-center items-center relative">
        <div id="visualization" class="w-full h-full flex items-end justify-center"></div>
      </div>

      <div class="step-process-container w-1/3 h-96 overflow-y-auto">
        <h2 class="text-xl font-semibold mb-4 text-purple-800 text-center">Search Steps</h2>
        <div id="process" class="text-gray-700 text-sm"></div>
      </div>
    </div>

    <div class="flex justify-center items-center gap-2">
      <input
        id="inputField"
        type="text"
        placeholder="Enter sorted numbers, e.g., 1,3,5,7,9"
        class="border border-gray-300 p-2 rounded w-64"
      />

      <input
        id="targetInput"
        type="text"
        placeholder="Enter target sum"
        class="border border-gray-300 p-2 rounded w-64"
      />

      <div class="flex items-center space-x-4">
        <label for="speedControl" class="text-gray-700 font-semibold">Speed:</label>
        <input
          type="range"
          id="speedControl"
          min="100"
          max="2000"
          value="500"
          class="slider"
        />
      </div>

      <div class="flex gap-2">
        <button onclick="startSearching()" class="custom-button">Start</button>
        <button onclick="pauseSearching()" class="custom-button">Pause</button>
        <button onclick="resetSearching()" class="custom-button">Reset</button>
      </div>

      <div id="errorMessage" class="error-message"></div>
    </div>

    <div class="description-container">
      <div class="flex justify-center items-center space-x-4 mb-4">
        <button onclick="toggleContainer('About')" class="custom-button">About</button>
        <button onclick="toggleContainer('Work')" class="custom-button">How does it work</button>
        <button onclick="toggleContainer('Learn')" class="custom-button">Learn More</button>
      </div>

      <div id="About" class="hidden">
        <p>
            The <b>Two Pointer Technique</b> is a method used to solve problems that require 
            traversing a sequence (such as an array) using two indices or pointers. The technique 
            is commonly used in problems where the sequence is sorted, and it helps optimize 
            the time complexity by reducing unnecessary comparisons. One popular application 
            of the Two Pointer Technique is the <b>Two Sum</b> problem.
        </p>
        <ul class="list-disc ml-6 mt-4 text-gray-700">
            <li>
                <b>Two Sum Problem:</b> Given an array of numbers and a target value, 
                find two numbers in the array that add up to the target sum.
            </li>
            <li>
                <b>Steps of the Two Pointer Technique for Two Sum:</b>
                <ul class="list-disc ml-6">
                    <li>
                        <b>Sort the array:</b> If the array is not sorted, first sort it. 
                        This allows the use of the two pointers, which will help optimize the search.
                    </li>
                    <li>
                        <b>Initialize two pointers:</b> Place one pointer at the beginning of the array 
                        (left pointer) and the other at the end (right pointer).
                    </li>
                    <li>
                        <b>Compare the sum:</b> Calculate the sum of the elements at the two pointers.
                        <ul class="list-disc ml-6">
                            <li>If the sum is equal to the target, return the indices of the two elements.</li>
                            <li>If the sum is less than the target, move the left pointer to the right to increase the sum.</li>
                            <li>If the sum is greater than the target, move the right pointer to the left to decrease the sum.</li>
                        </ul>
                    </li>
                    <li>
                        Repeat the process until the two pointers meet or a solution is found.
                    </li>
                </ul>
            </li>
            <li>
                <b>Time Complexity:</b>
                <ul class="list-disc ml-6">
                    <li><b>Best and worst case:</b> O(n) – after sorting the array (O(n log n)), 
                        the two pointers traverse the array in linear time (O(n)) for each check.</li>
                </ul>
            </li>
            <li>
                <b>Space Complexity:</b> O(1) – The algorithm uses constant space as the pointers 
                traverse the array in place without requiring additional storage.
            </li>
            <li>
                <b>Advantages:</b>
                <ul class="list-disc ml-6">
                    <li>Efficient for problems that can be solved using two pointers, especially when the array is sorted.</li>
                    <li>Optimizes the search compared to brute force methods, reducing time complexity.</li>
                </ul>
            </li>
            <li>
                <b>Disadvantages:</b>
                <ul class="list-disc ml-6">
                    <li>Only applicable to problems where the sequence can be sorted or the problem structure allows the use of two pointers.</li>
                    <li>Requires sorting the array, which adds extra time complexity (O(n log n)) unless the array is already sorted.</li>
                </ul>
            </li>
        </ul>
    </div>
    
    
    

      <div id="Work" class="hidden">
        <h2 class="text-lg font-bold">JavaScript Two Pointers</h2>
        <pre class="line-numbers"><code class="language-javascript">
          // Function to check whether any pair exists
          // whose sum is equal to the given target value
          function twoSum(arr, target) {
              let n = arr.length;
          
              // Iterate through each element in the array
              for (let i = 0; i < n; i++) {
              
                  // For each element arr[i], check every
                  // other element arr[j] that comes after it
                  for (let j = i + 1; j < n; j++) {
                  
                      // Check if the sum of the current pair
                      // equals the target
                      if (arr[i] + arr[j] === target) {
                          return true;
                      }
                  }
              }
              // If no pair is found after checking
              // all possibilities
              return false;
          }
          
          let arr = [0, -1, 2, -3, 1];
          let target = -2;
          
          // Call the twoSum function and print the result
          if (twoSum(arr, target))
              console.log("true");
          else 
              console.log("false");
          
             
        </code></pre>
        <h2 class="text-lg font-bold">Python Two Pointers</h2>
        <pre class="line-numbers"><code class="language-python">
          # Function to check whether any pair exists
          # whose sum is equal to the given target value
          def two_sum(arr, target):
              n = len(arr)
          
              # Iterate through each element in the array
              for i in range(n):
                
                  # For each element arr[i], check every
                  # other element arr[j] that comes after it
                  for j in range(i + 1, n):
                    
                      # Check if the sum of the current pair
                      # equals the target
                      if arr[i] + arr[j] == target:
                          return True
                        
              # If no pair is found after checking
              # all possibilities
              return False
          
          arr = [0, -1, 2, -3, 1]
          target = -2
          
          # Call the two_sum function and print the result
          if two_sum(arr, target):
              print("true")
          else:
              print("false")
        </code></pre>
        <h2 class="text-lg font-bold">Java Two Pointers</h2>
        <pre class="line-numbers"><code class="language-java">

          class GfG {

            // Function to check whether any pair exists
            // whose sum is equal to the given target value
            static boolean twoSum(int[] arr, int target){
                int n = arr.length;
        
                // Iterate through each element in the array
                for (int i = 0; i < n; i++) {
                    // For each element arr[i], check every
                    // other element arr[j] that comes after it
                    for (int j = i + 1; j < n; j++) {
                        // Check if the sum of the current pair
                        // equals the target
                        if (arr[i] + arr[j] == target) {
                            return true;
                        }
                    }
                }
                // If no pair is found after checking
                // all possibilities
                return false;
            }
        
            public static void main(String[] args){
        
                int[] arr = { 0, -1, 2, -3, 1 };
                int target = -2;
        
                // Call the twoSum function and print the result
                if (twoSum(arr, target))
                    System.out.println("true");
                else
                    System.out.println("false");
            }
        }
        </code></pre>
      </div>
    </div>
    </div>

    <script>
       function toggleContainer(containerId) {
        const containers = ['About', 'Work'];
        containers.forEach((id) => {
          const container = document.getElementById(id);
          if (id === containerId) {
            container.classList.toggle('hidden');
          } else {
            container.classList.add('hidden');
          }
        });
      }

      let array = [];
      let target = null;
      let left = 0;
      let right = 0;
      let intervalId;
      let isPaused = false;
      let speed = 500;

      document
        .getElementById("speedControl")
        .addEventListener("input", (event) => {
          speed = event.target.value;
          if (intervalId) {
            clearInterval(intervalId);
            intervalId = setInterval(twoSumStep, speed);
          }
        });

        function displayArray() {
  const visualization = document.getElementById("visualization");
  visualization.innerHTML = "";

  const maxValue = Math.max(...array);
  const containerHeight = 400;

  array.forEach((value, index) => {
    const bar = document.createElement("div");
    bar.className = "bar";

   
    bar.style.height = `${((value / maxValue) * containerHeight) - 50}px`;
    bar.innerText = value;

    if (index === left || index === right) {
      bar.classList.add("compare");
    }

    if (array[left] + array[right] === target) {
      bar.classList.add("found");
    }

    visualization.appendChild(bar);
  });
}

      function displayProcessStep(message) {
        const processContainer = document.getElementById("process");
        const step = document.createElement("div");
        step.className = "text-sm text-gray-700 mb-2";
        step.innerText = message;
        processContainer.appendChild(step);
        processContainer.scrollTop = processContainer.scrollHeight;
      }

      function isArraySorted(arr) {
        for (let i = 1; i < arr.length; i++) {
          if (arr[i] < arr[i - 1]) return false;
        }
        return true;
      }

      function startSearching() {
        const input = document.getElementById("inputField").value;
        const targetInput = document.getElementById("targetInput").value;

        array = input.split(",").map(Number);
        target = Number(targetInput);

        if (!isArraySorted(array)) {
          document.getElementById("errorMessage").innerText = "Error: The array must be sorted in ascending order!";
          return;
        } else {
          document.getElementById("errorMessage").innerText = "";
        }

        left = 0;
        right = array.length - 1;
        isPaused = false;
        document.getElementById("process").innerHTML = "";
        displayArray();
        displayProcessStep(`Starting search for two numbers that sum to ${target} in [${array.join(", ")}]`);
        intervalId = setInterval(twoSumStep, speed);
      }

      function twoSumStep() {
        if (isPaused) return;

        if (left < right) {
          displayArray();

          const currentSum = array[left] + array[right];
          if (currentSum === target) {
            displayProcessStep(`Found two numbers: ${array[left]} + ${array[right]} = ${target}`);
            clearInterval(intervalId);
            displayArray();
          } else if (currentSum < target) {
            displayProcessStep(`Sum of ${array[left]} + ${array[right]} = ${currentSum} is less than ${target}. Moving left pointer.`);
            left++;
          } else {
            displayProcessStep(`Sum of ${array[left]} + ${array[right]} = ${currentSum} is greater than ${target}. Moving right pointer.`);
            right--;
          }
        } else {
          displayProcessStep("No pair found that sums to the target.");
          clearInterval(intervalId);
        }
      }

      function pauseSearching() {
        isPaused = !isPaused;
      }

      function resetSearching() {
        clearInterval(intervalId);
        document.getElementById("visualization").innerHTML = "";
        document.getElementById("process").innerHTML = "";
        document.getElementById("inputField").value = "";
        document.getElementById("targetInput").value = "";
        document.getElementById("errorMessage").innerText = "";
        array = [];
        left = 0;
        right = 0;
        isPaused = false;
      }
    </script>
  </body>
</html>